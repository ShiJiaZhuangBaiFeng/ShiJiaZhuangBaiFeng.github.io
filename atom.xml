<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>苗春童的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shijiazhuangbaifeng.github.io/"/>
  <updated>2020-08-01T06:09:17.303Z</updated>
  <id>https://shijiazhuangbaifeng.github.io/</id>
  
  <author>
    <name>苗春童</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title># 代理池</title>
    <link href="https://shijiazhuangbaifeng.github.io/2020/08/01/#%20%E4%BB%A3%E7%90%86%E6%B1%A0/"/>
    <id>https://shijiazhuangbaifeng.github.io/2020/08/01/#%20%E4%BB%A3%E7%90%86%E6%B1%A0/</id>
    <published>2020-08-01T05:16:51.427Z</published>
    <updated>2020-08-01T06:09:17.303Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Aug 01 2020 14:18:37 GMT+0800 (GMT+08:00) --><h1 id="代理池"><a href="#代理池" class="headerlink" title="代理池"></a>代理池</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="什么是代理池"><a href="#什么是代理池" class="headerlink" title="什么是代理池"></a>什么是代理池</h3><p>代理池就是由多个代理<code>IP</code>组成的池子，他可以提供很多高质量的可用代理 <code>IP</code>。</p><h3 id="为什么要使用代理池"><a href="#为什么要使用代理池" class="headerlink" title="为什么要使用代理池"></a>为什么要使用代理池</h3><p>最常见的反爬虫手段就是当一个 <code>IP</code> 频繁的访问，就会将这个 <code>IP</code> 拉入黑名单，解决这个问题的手段就是代理<code>IP</code>当一个代理<code>IP</code>封掉以后，换其他的代理<code>IP</code>。</p><h2 id="代理池的设计"><a href="#代理池的设计" class="headerlink" title="代理池的设计"></a>代理池的设计</h2><h3 id="代理池的工作流程"><a href="#代理池的工作流程" class="headerlink" title="代理池的工作流程"></a>代理池的工作流程</h3><p>代理池的工作流程图如下：</p><p><img src="D:%5CNote%5Cblog_public%5Csource_posts%5Cproxy.png" alt=""></p><p>工作流程如下：</p><ul><li>从代理网站上获取代理<code>IP</code>信息 —&gt; 检测代理IP —&gt; 返回可用的代理IP —&gt; 写入到数据库中</li><li>代理IP检测模块 —&gt; 从数据库中获取所有代理IP —&gt; 检测代理IP —&gt; 如果不可使用分数<code>-1</code>，分数为 <code>0</code> 删除IP，可以使用分数设置为默认IP，跟新数据库</li><li>爬虫想<code>proxy_api</code> 所有代理API —&gt; 查询数据库</li></ul><h3 id="代理池模块"><a href="#代理池模块" class="headerlink" title="代理池模块"></a>代理池模块</h3><p>代理池主要分为五大模块：</p><ul><li>爬虫模块：采集代理 <code>IP</code><ul><li>从代理IP网站上采集代理IP</li></ul></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Aug 01 2020 14:18:37 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;代理池&quot;&gt;&lt;a href=&quot;#代理池&quot; class=&quot;headerlink&quot; title=&quot;代理池&quot;&gt;&lt;/a&gt;代理池&lt;/h1&gt;&lt;h2 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JVM</title>
    <link href="https://shijiazhuangbaifeng.github.io/2020/08/01/JVM/"/>
    <id>https://shijiazhuangbaifeng.github.io/2020/08/01/JVM/</id>
    <published>2020-08-01T02:53:21.000Z</published>
    <updated>2020-08-01T06:17:32.135Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Aug 01 2020 14:18:37 GMT+0800 (GMT+08:00) --><h2 id="什么是JVM"><a href="#什么是JVM" class="headerlink" title="什么是JVM"></a>什么是JVM</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><code>jvm</code> 是运行 <code>java</code> 二进制字节码运行的环境</p><p>好处：</p><ul><li><code>JVM</code> 是 <code>java</code> 程序实现一次编写到处运行的重要条件</li><li>自动内存管理，自动回收</li><li>数组下标越界检查</li></ul><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>比较 <code>JRE JVM JDK</code> 三者之间的关系：</p><p><img src="D:%5CNote%5Cblog_public%5Csource_posts%5CJVM.png" alt=""></p><blockquote><p>学习<code>JVM</code>是中高级程序员的必备技能</p></blockquote><h2 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h2><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p><code>Program Counter Register</code> 程序计数器（寄存器）</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>在程序执行的过程中，记录下一条 <code>JVM</code> 指令执行的地址</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>线程私有，每一个线程都有自己的程序计数器。</li><li>唯一一个不会出现内存溢出的部分</li></ul><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>栈（<code>Stacks</code>）的数据结构类似于弹夹，先进后出的结构，栈的每一个元素称之为栈帧，一个栈帧就是一个方法的调用，栈帧是每个方法调用所需要的内存。</p><p>方法执行完，栈帧就会被释放，每个线程都有一个活动栈帧，对应着正在执行的方法。</p><p><img src="D:%5CNote%5Cblog_public%5Csource_posts%5C%E6%A0%88.png" alt=""></p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li>垃圾回收会不会管理栈？<ul><li>不会，因为当一次方法执行结束，栈帧的数据会自动销毁</li></ul></li><li>栈内存分配越大越好吗？<ul><li><code>Linux</code> 和 <code>macOS</code> 的默认内存为 <code>1024kb</code>，可以使用 <code>-Xss1m</code> 来配置内存，这里配置的是单个栈的内存，单个栈内存分配的大，会影响线程的数量。</li></ul></li><li>方法内的局部变量是否线程安全？<ul><li>这要看这个变量是不是线程共享的</li></ul></li></ul><h4 id="栈内存溢出"><a href="#栈内存溢出" class="headerlink" title="栈内存溢出"></a>栈内存溢出</h4><p>导致栈内存溢出的原因有：</p><ul><li>栈帧过多，例如递归没有设计好</li><li>栈帧过大，一个栈帧的元素查过了栈的内存</li></ul><p>异常信息为：<code>java.lang.StackOverflowError</code></p><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈 (<code>Native Method Stacks</code>)，本地方法指的是不是由JAVA编写的方法，本地方法栈就是为本地方法的运行提供内存空间的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</span><br></pre></td></tr></table></figure><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>程序计数器、栈和本地方法栈都是线程私有的，而本地方法栈则是线程共享的，一个JVM只会有一个堆空间，通过 <code>new</code> 关键字创建的对象都会创建在堆当中。</p><p>可以通过 <code>-Xms1024m</code> 设置内存大小。</p><h4 id="堆内存溢出"><a href="#堆内存溢出" class="headerlink" title="堆内存溢出"></a>堆内存溢出</h4><p>堆内部虽然有垃圾回收机制，但是回收的对象是无用的对象，当创建的对象过多的时候也会内存溢出：<code>Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</code>。</p><h4 id="堆内存诊断"><a href="#堆内存诊断" class="headerlink" title="堆内存诊断"></a>堆内存诊断</h4><ol><li><code>jps</code> 查看系统中有哪些JVM进程</li><li><code>jmap</code> 查看堆内存的占用情况</li><li><code>jconsole</code> 图形化界面，多功能的检测工具</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapDome01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1....."</span>);</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">10</span>];</span><br><span class="line">        System.out.println(<span class="string">"2....."</span>);</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        bytes = <span class="keyword">null</span>;</span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(<span class="string">"3....."</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000000000l</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>jmap</code> 查看内存占用情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -heap</span><br></pre></td></tr></table></figure><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区是所有虚拟机线程共享的部分，存储跟类结构相关的信息：方法、构造器、常量，在虚拟机启动的时候被创建，逻辑上是属于堆的一部分。</p><p><code>1.8</code> 以后方法区是有元空间进行实现，放在了虚拟内存当中，内存有多大，元空间就有多大，可以通过：<code>-XX:MaxMetaspaceSize=8m</code>来进行设置</p><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>常见于 <code>NIO</code> 操作，用于数据缓冲区，分配回收成本高，单读写性能高，并且不受JVM虚拟机管理。</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Aug 01 2020 14:18:37 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;什么是JVM&quot;&gt;&lt;a href=&quot;#什么是JVM&quot; class=&quot;headerlink&quot; title=&quot;什么是JVM&quot;&gt;&lt;/a&gt;什么是
      
    
    </summary>
    
    
      <category term="JAVA" scheme="https://shijiazhuangbaifeng.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://shijiazhuangbaifeng.github.io/tags/JAVA/"/>
    
      <category term="原理" scheme="https://shijiazhuangbaifeng.github.io/tags/%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>爬虫</title>
    <link href="https://shijiazhuangbaifeng.github.io/2020/08/01/%E7%88%AC%E8%99%AB/"/>
    <id>https://shijiazhuangbaifeng.github.io/2020/08/01/%E7%88%AC%E8%99%AB/</id>
    <published>2020-08-01T02:53:21.000Z</published>
    <updated>2020-08-01T06:16:43.534Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Aug 01 2020 14:18:37 GMT+0800 (GMT+08:00) --><h2 id="CMD-命令使用"><a href="#CMD-命令使用" class="headerlink" title="CMD 命令使用"></a>CMD 命令使用</h2><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><p><code>curl</code> 指定一个 <code>URL</code> 路径，访问，并返回网页的内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl www.baidu.com</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="center">作用</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center"><code>-A</code></td><td align="center">设置 <code>user-agent</code></td><td align="center"><code>curl -A &quot;chrome&quot; www.baidu.com</code></td></tr><tr><td align="center"><code>-X</code></td><td align="center">设置请求的方式</td><td align="center"><code>curl -X POST www.baidu.com</code></td></tr><tr><td align="center"><code>-I</code></td><td align="center">只返回请求的头信息</td><td align="center"><code>curl -I www.baidu.com</code></td></tr><tr><td align="center"><code>-d</code></td><td align="center"><code>POST</code>请求携带参数</td><td align="center"><code>curl -d &quot;username=12345&amp;password=122&quot; 127.0.0.1/post</code></td></tr><tr><td align="center"><code>-O</code></td><td align="center">下载文件并以远程的文件名保存</td><td align="center"><code>curl -O http://127.0.0.1/image/jpeg</code></td></tr><tr><td align="center"><code>-o</code></td><td align="center">自定义文件名保存</td><td align="center"><code>curl -o finename http://127.0.0.1/image/jpeg</code></td></tr><tr><td align="center"><code>-L</code></td><td align="center">可以重定向</td><td align="center"><code>curl -L -I https://www.baidu.com</code></td></tr><tr><td align="center"><code>-H</code></td><td align="center">设置请求头</td><td align="center"><code>curl -H &quot;accept:image/jpeg&quot;</code></td></tr><tr><td align="center"><code>-k</code></td><td align="center">允许发送一个不安全的SSL请求</td><td align="center"></td></tr><tr><td align="center"><code>-D</code></td><td align="center">发起一个带 <code>cookie</code>的请求</td><td align="center"></td></tr><tr><td align="center"><code>-s</code></td><td align="center">不显示其他无关信息</td><td align="center"></td></tr></tbody></table><h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><p>下载一个文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget www.baidu.com</span><br></pre></td></tr></table></figure><h2 id="Python-库"><a href="#Python-库" class="headerlink" title="Python 库"></a>Python 库</h2><h3 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h3><p><code>urllib</code> 是比较基础的爬虫库，<code>Python</code> 内置的库，<code>urllib</code> 中有三个模块，分别是：</p><ul><li><code>request</code></li><li><code>response</code></li><li><code>parse</code></li></ul><h4 id="使用-urllib"><a href="#使用-urllib" class="headerlink" title="使用 urllib"></a>使用 urllib</h4><p>导入 <code>urllib.request</code> 部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">r = urllib.request.urlopen(<span class="string">'http://192.168.159.128/get'</span>)</span><br></pre></td></tr></table></figure><p><code>urllib.request.urlopen</code> 是对原始操作的封装，他的参数有： <code>url</code> 指定所需打开的网址，这个方法返回的是 <code>HttpResponse</code> 对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从缓存中读取,并解码</span></span><br><span class="line">text = r.read().decode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为字典</span></span><br><span class="line">data = json.loads(text)</span><br><span class="line"></span><br><span class="line">print(text)</span><br></pre></td></tr></table></figure><p>由于从 <code>HttpResponse</code> 读取到的数据是字节，需要先对数据进行解码，如果数据是 <code>json</code> 数据还可以进行转换，<code>HttpResponse</code> 的对象还可以获得状态码</p><h4 id="Basic-Auth"><a href="#Basic-Auth" class="headerlink" title="Basic Auth"></a>Basic Auth</h4><p>在登录方式有一种登录方式为 <code>Basic Auth</code> 是由浏览器来提供登录框：</p><p><img src="Snipaste_2020-06-22_18-21-20.png" alt=""></p><p><code>urllib</code> 对此提供了解决方案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request <span class="keyword">as</span> request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建密码管理器</span></span><br><span class="line">realm = request.HTTPPasswordMgrWithDefaultRealm()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加账号密码</span></span><br><span class="line">realm.add_password(realm=<span class="literal">None</span>, uri=<span class="string">'http://192.168.159.128/basic-auth/zhangsan/123456'</span>, user=<span class="string">"zhangsan"</span>, passwd=<span class="string">"123456"</span>)</span><br><span class="line"></span><br><span class="line">auth_handler = request.HTTPBasicAuthHandler(password_mgr=realm)</span><br><span class="line"></span><br><span class="line">opener = request.build_opener(auth_handler)</span><br><span class="line"></span><br><span class="line">request.install_opener(opener)</span><br><span class="line"></span><br><span class="line">result = request.urlopen(url=<span class="string">'http://192.168.159.128/basic-auth/zhangsan/123456'</span>)</span><br><span class="line"></span><br><span class="line">print(result.read().decode())</span><br></pre></td></tr></table></figure><h3 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h3><p><code>requests</code> 是最常用的 <code>python</code> 常用第三方库，他比 <code>urllib</code> 更加的好用，他对 <code>urllib</code> 进行了一次封装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><h4 id="使用-request"><a href="#使用-request" class="headerlink" title="使用 request"></a>使用 request</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># GET 请求</span></span><br><span class="line">result = requests.get(<span class="string">'http://192.168.159.128/get'</span>)</span><br><span class="line">print(result.status_code, result.headers)</span><br><span class="line">print(result.json())</span><br><span class="line"></span><br><span class="line"><span class="comment"># POST 请求</span></span><br><span class="line">result = requests.post(<span class="string">'http://192.168.159.128/post'</span>)</span><br><span class="line">print(result.content)</span><br></pre></td></tr></table></figure><p>返回的对象如果是 <code>json</code> 数据，可以使用 <code>json</code> 方法直接转换为字典。</p><h4 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h4><p>当状态码为：<code>400 ~ 600</code> 之间的时候，抛出异常，方便查找错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result.raise_for_status()</span><br></pre></td></tr></table></figure><h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 session 对象</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># get 返回数据</span></span><br><span class="line">result = session.get(<span class="string">'http://192.168.159.128/cookies/set/username/zhangsan'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下一次请求的时候会将当前的 session 的域名相关的 cookie 带上</span></span><br><span class="line">cookies = session.get(<span class="string">'http://192.168.159.128/cookies'</span>)</span><br><span class="line"></span><br><span class="line">print(cookies.json())</span><br></pre></td></tr></table></figure><h3 id="bs4"><a href="#bs4" class="headerlink" title="bs4"></a>bs4</h3><p><code>bs4</code> 是对 <code>html</code> 结构的内容进行处理，使用面向对象的方式来操作 <code>HTML</code> 内容，安装 <code>bs4</code> ：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install bs4</span><br></pre></td></tr></table></figure><h4 id="使用-bs4"><a href="#使用-bs4" class="headerlink" title="使用 bs4"></a>使用 bs4</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">result = requests.get(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"></span><br><span class="line">html_content = BeautifulSoup(result.content.decode())</span><br><span class="line"></span><br><span class="line">print(html_content.title)</span><br></pre></td></tr></table></figure><p><code>title</code> 是一个对象，使用 <code>get_text</code> 方法就能够获得标签的内容。</p><h4 id="BeautifulSoup-常用成员"><a href="#BeautifulSoup-常用成员" class="headerlink" title="BeautifulSoup 常用成员"></a>BeautifulSoup 常用成员</h4><table><thead><tr><th>方法 / 属性</th><th>作用</th></tr></thead><tbody><tr><td><code>find_all(tag)</code></td><td>根据 <code>tag</code> 标签名称获取 ，所有子节点</td></tr><tr><td><code>children</code></td><td>获取所有的子标签</td></tr><tr><td><code>select(class_name)</code></td><td>根据查询符合条件的标签，格式和 <code>css</code> 的格式一样</td></tr><tr><td><code>attrs</code></td><td>获取当前标签的属性，格式是字典</td></tr></tbody></table><h3 id="lxml"><a href="#lxml" class="headerlink" title="lxml"></a>lxml</h3><p><code>lxml</code>是<code>python</code>的一个解析库,支持<code>HTML</code>和<code>XML</code>的解析,支持XPath解析方式,而且解析效率非常高<code>XPath</code> ：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml</span><br></pre></td></tr></table></figure><h4 id="和-bs4-整合"><a href="#和-bs4-整合" class="headerlink" title="和 bs4 整合"></a>和 <code>bs4</code> 整合</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">result = requests.get(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"></span><br><span class="line">html_content = BeautifulSoup(result.content.decode(), <span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'* '</span> * <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">print(html_content.text)</span><br></pre></td></tr></table></figure><h4 id="单独使用"><a href="#单独使用" class="headerlink" title="单独使用"></a>单独使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">result = requests.get(<span class="string">'http://www.huanyue123.com/book/64/64118/'</span>).content.decode(<span class="string">'gbk'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建选择器</span></span><br><span class="line">select = etree.HTML(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 页面所有的连接</span></span><br><span class="line">links = select.xpath(<span class="string">'//li/a/@href'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">    print(link)</span><br></pre></td></tr></table></figure><h4 id="XPATH"><a href="#XPATH" class="headerlink" title="XPATH"></a>XPATH</h4><p>在上面的案例中使用到了 <code>XPATH</code> ，<code>XPATH</code> 不是 <code>python</code> 的库，而是一门语言，使用 <code>XPATH</code> 能够是很方便的查询。</p><h2 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h2><p><code>Scrapy</code> 是一个为了爬取网站数据，提取结构性数据的而编写的应用程序，可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。</p><p>安装 <code>Scrapy</code> ：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure><h3 id="使用-Scrapy"><a href="#使用-Scrapy" class="headerlink" title="使用 Scrapy"></a>使用 Scrapy</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    <span class="comment"># 爬虫名称</span></span><br><span class="line">    name = <span class="string">'quotes'</span></span><br><span class="line">    <span class="comment"># 目标网站</span></span><br><span class="line">    start_urls = [<span class="string">'http://quotes.toscrape.com/'</span>,]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 业务方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># 获取信息</span></span><br><span class="line">        names = response.xpath(<span class="string">'//div[@class="quote"]//small/text()'</span>)</span><br><span class="line">        contents = response.xpath(<span class="string">'//div[@class="quote"]/span[@class="text"]/text()'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> name, content <span class="keyword">in</span> zip(names, contents):</span><br><span class="line">            <span class="keyword">yield</span> &#123;</span><br><span class="line">                <span class="string">'author'</span>: name.extract(),</span><br><span class="line">                <span class="string">'content'</span>: content.extract()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        next_link = response.xpath(<span class="string">'//nav/ul/li[@class="next"]/a/@href'</span>).extract_first()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> next_link:</span><br><span class="line">            print(next_link)</span><br><span class="line">            <span class="keyword">yield</span> response.follow(next_link, self.parse)</span><br></pre></td></tr></table></figure><p>运行这个 <code>python</code> 文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy runspider quotes_scrapy.py</span><br></pre></td></tr></table></figure><ul><li><code>-o</code> ：将内容写入到一个文件中</li><li><code>-t</code>：指定文件格式</li></ul><h3 id="Scrapy-入门"><a href="#Scrapy-入门" class="headerlink" title="Scrapy 入门"></a>Scrapy 入门</h3><p>使用命令，创建一个 <code>Scrapy</code> 项目：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject Day01</span><br></pre></td></tr></table></figure><p>该命令会创建以下的目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Day01&#x2F;</span><br><span class="line">    scrapy.cfg</span><br><span class="line">    Day01&#x2F;</span><br><span class="line">        __init__.py</span><br><span class="line">        items.py</span><br><span class="line">        pipelines.py</span><br><span class="line">        settings.py</span><br><span class="line">        spiders&#x2F;</span><br><span class="line">            __init__.py</span><br></pre></td></tr></table></figure><p>输入以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider quotes http://quotes.toscrape.com/</span><br></pre></td></tr></table></figure><p>在 <code>Day01/Day01/spiders</code> 目录下会增加一个 <code>quotes.py</code> 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'quotes'</span></span><br><span class="line">    allowed_domains = [<span class="string">'http://quotes.toscrape.com/'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://http://quotes.toscrape.com//'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li><code>name</code>：爬虫的名称</li><li><code>allowed_domains</code>： 所爬网页的域名必须要一致</li><li><code>start_url</code> : 爬虫网页入口</li></ul><p>在 <code>parse</code> 方法中填写业务逻辑以后，执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl quotes</span><br></pre></td></tr></table></figure><h3 id="HtmlResponse"><a href="#HtmlResponse" class="headerlink" title="HtmlResponse"></a>HtmlResponse</h3><p><code>parse</code> 的 <code>response</code> 方法参数的数据类型是：<code>HtmlResponse</code>，他的常用方法有：</p><table><thead><tr><th>属性/方法</th><th>作用</th></tr></thead><tbody><tr><td><code>xpath(query)</code></td><td><code>query</code> ，支持 <code>xpath</code> 的方式获取数据，返回 <code>selector</code> 节点列表</td></tr><tr><td><code>css(query)</code></td><td>支持通过使用 <code>css</code> 的过滤数据，返回 <code>selector</code> 节点列表</td></tr><tr><td><code>extract()</code></td><td>序列化该节点为 <code>unicode</code> 字符串，返回字符列表</td></tr><tr><td><code>extract()</code></td><td>序列化该节点为 <code>unicode</code> 字符串，返回列表的第一个元素</td></tr><tr><td><code>re(query)</code></td><td>根据传入的正则表达式对数据进行提取，返回unicode字符串list列表。</td></tr></tbody></table><p>以上方法，对于 <code>selector</code> 对象同样适用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'quotes'</span></span><br><span class="line">    allowed_domains = [<span class="string">'http://quotes.toscrape.com/'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://http://quotes.toscrape.com//'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">yield</span> response.fllow(url, callback)</span><br><span class="line">        ....</span><br></pre></td></tr></table></figure><p><code>response.fllow</code> 的两个参数的作用为：</p><ul><li><code>url</code> ：前往的<code>url</code></li><li><code>callback</code>：回调函数，默认是 <code>parse</code></li></ul><h3 id="调试爬虫"><a href="#调试爬虫" class="headerlink" title="调试爬虫"></a>调试爬虫</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入控制台，适用的是控制台环境</span></span><br><span class="line">scrapy shell </span><br><span class="line"><span class="comment"># 进入控制台，带一个 url 参数</span></span><br><span class="line">scrapy shell url</span><br></pre></td></tr></table></figure><p>进入控制台以后，可以使用以下函数和对象：</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td><code>fetch(url)</code></td><td>请求 <code>url</code> 或 <code>request</code> 对象，使用后会刷新 <code>request</code> 和 <code>response</code> 对象</td></tr><tr><td><code>view()</code></td><td>使用浏览器打开 <code>response</code> 的网页路径</td></tr><tr><td><code>shelp()</code></td><td>打印帮助信息</td></tr><tr><td><code>spider</code></td><td>相关 <code>Spider</code> 类的实例</td></tr><tr><td><code>sttings</code></td><td>保存所有配置信息的对象</td></tr></tbody></table><h3 id="pipelines"><a href="#pipelines" class="headerlink" title="pipelines"></a>pipelines</h3><p><code>pipelines</code> 的作用相当于是 <code>AOP</code> 切面，编写在 <code>pipelines.py</code> 文件中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Day01Pipeline</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        初始化</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        每产生一个 item 对象，就会执行一次方法</span></span><br><span class="line"><span class="string">        :param item:</span></span><br><span class="line"><span class="string">        :param spider:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        初始化</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>创建好以后，需要在 <code>settings</code> 文件中配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">'Day01.pipelines.Day01Pipeline'</span>: <span class="number">300</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ITEM_PIPELINES</code> 的 <code>key</code> 是 <code>Day01Pipeline</code> 的全路径 ,<code>value</code> 是优先级，判断是哪一个先执行，<code>process_item</code> 是必须的并且必须返回一个 <code>item</code> 对象，如果不返回就不会执行下一个 <code>process_item</code>。</p><p>如果想要将 <code>item</code> 抛弃掉，需要抛出一个异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reise DropItem()</span><br></pre></td></tr></table></figure><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>中间件定义在 <code>middlewares</code> 文件中，中间件的方法主要有：</p><h4 id="process-request"><a href="#process-request" class="headerlink" title="process_request"></a>process_request</h4><p>在 <code>request</code> 传往 <code>downloader</code> 的过程中和将下载结果返回给 <code>engine</code> 的过程中被调用，他的返回值如下，根据返回值的不同会有不同的行为:</p><table><thead><tr><th>返回</th><th>行为</th></tr></thead><tbody><tr><td><code>None</code></td><td>一切执行正常，继续执行下一个中间件链</td></tr><tr><td><code>Response</code></td><td>停止调用 <code>process_request</code> 和 <code>process_exception</code> 方法，也不再继续执行下一个中间件，去执行<code>process_response</code></td></tr><tr><td><code>Request</code></td><td>不在调用其他的 <code>process_request</code> 方法，由调度器从新安排下载</td></tr><tr><td><code>IgnoreRequest</code></td><td><code>process_exception</code> 会被调用，如果没有此方法，则 <code>request.errback</code>会被调用，此方法也没有，该方法将会被彻底忽略</td></tr></tbody></table><h4 id="process-response"><a href="#process-response" class="headerlink" title="process_response"></a>process_response</h4><p>将下载结果返回给 <code>engine</code> 的过程中被调用：</p><table><thead><tr><th>返回</th><th>行为</th></tr></thead><tbody><tr><td><code>Response</code></td><td>继续调用其他中间件的 <code>process_response</code> 方法</td></tr><tr><td><code>Request</code></td><td>不在调用其他的 <code>process_request</code> 方法，由调度器从新安排下载</td></tr><tr><td><code>IgnoreRequest</code></td><td><code>process_exception</code> 会被调用，如果没有此方法，则 <code>request.errback</code>会被调用，此方法也没有，该方法将会被彻底忽略</td></tr></tbody></table><h4 id="process-exception"><a href="#process-exception" class="headerlink" title="process_exception"></a>process_exception</h4><p>下载的过程中发生异常或者其他方法返回 <code>IgnoreRequest</code> 的时候会被执行：</p><table><thead><tr><th>返回</th><th>行为</th></tr></thead><tbody><tr><td><code>Response</code></td><td>调用开始中间件链的 <code>process_response</code> 的流程</td></tr><tr><td><code>Request</code></td><td>不在调用其他的 <code>process_request</code> 方法，由调度器从新安排下载</td></tr><tr><td><code>None</code></td><td><code>process_exception</code> 会被调用，如果没有此方法，则 <code>request.errback</code>会被调用，此方法也没有，该方法将会被彻底忽略</td></tr></tbody></table><h2 id="scrapy-redis"><a href="#scrapy-redis" class="headerlink" title="scrapy-redis"></a>scrapy-redis</h2><p><code>scrapy-redis</code> 是 <code>scrapy</code> 的一个插件，帮助 <code>scrapy</code> 多个进程之间的协作，<code>scrapy-redis</code> 安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy-redis</span><br></pre></td></tr></table></figure><p>安装好以后，只需要在 <code>settings.py</code> 文件中修改配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调度器</span></span><br><span class="line">SCHEDULER = <span class="string">"scrapy_redis.scheduler.Scheduler"</span></span><br><span class="line"><span class="comment"># 过滤器</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">"scrapy_redis.dupefilter.RFPDupeFilter"</span></span><br><span class="line"><span class="comment"># Redis 的路径</span></span><br><span class="line">REDIS_URL = <span class="string">'redis://user:pass@hostname:9001'</span></span><br><span class="line"><span class="comment"># 退出时清空 redis 数据</span></span><br><span class="line">SCHEDULER_PERSIST = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="redis-中的key"><a href="#redis-中的key" class="headerlink" title="redis 中的key"></a>redis 中的key</h3><p>通过 <code>redis</code> 的客户端可以看到如下的 <code>key</code>:</p><table><thead><tr><th><code>key</code></th><th><code>value</code></th></tr></thead><tbody><tr><td><code>spiderName:dupefilter</code></td><td>这个是一个 <code>set</code> 类型的数据，存储的是所有<code>url</code>，<code>32</code>位<code>md5</code>的哈希值</td></tr><tr><td><code>quotes:requests</code></td><td>类型为<code>zset</code>，存储 <code>yield</code>的<code>request</code>对象，还没有请求过得。</td></tr><tr><td><code>spiderName:items</code></td><td>这一个需要开启<code>scrapy_redis</code> 提供的<code>pipelines</code></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">'scrapy_redis.pipelines.RedisPipeline'</span>: <span class="number">300</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h2><p><code>Selenium</code> 是一个自动化测试框架，在制作爬虫的时候因为反爬机制，无法获取数据，这个时候我们可以使用<code>selenium</code>，它相当于一个真正的浏览器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><p>要使用这个框架，需要下载对应的浏览器驱动，放在 <code>PATH</code> 路径下。</p><h3 id="启动一个浏览器"><a href="#启动一个浏览器" class="headerlink" title="启动一个浏览器"></a>启动一个浏览器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">firefox = webdriver.Firefox()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开京东</span></span><br><span class="line">firefox.get(url)</span><br></pre></td></tr></table></figure><p>如果想要使用其他的浏览器在 <code>webdriver</code> 创建对应的对象。</p><h3 id="控制浏览器"><a href="#控制浏览器" class="headerlink" title="控制浏览器"></a>控制浏览器</h3><p>浏览器创建的对象，提供一系列的方法用来操控浏览器：</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>get(url)</code></td><td>打开一个 <code>url</code></td></tr><tr><td><code>find_element_by_{tag}</code></td><td>查找一个元素，<code>{tag</code> 的选项有 <code>id</code>、<code>clss</code>、<code>xpaht</code></td></tr><tr><td><code>find_elements_by_{tag}</code></td><td>效果同上，查询多个</td></tr><tr><td><code>save_screenshot(file_name)</code></td><td>截图，将页面的内容截图下来，保存在一个文件</td></tr></tbody></table><h4 id="input-表单操作"><a href="#input-表单操作" class="headerlink" title="input 表单操作"></a>input 表单操作</h4><p>使用浏览器对象查询出 <code>input</code> 对象的时候，可以通过以下方法来操作：</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>click()</code></td><td>如果是链接和按钮可以使用此方法</td></tr><tr><td><code>send_keys(key)</code></td><td>如果是一个输入框则可以使用此方法发送数据</td></tr></tbody></table><h3 id="无界面"><a href="#无界面" class="headerlink" title="无界面"></a>无界面</h3><p>使用无界面的方式来运行 <code>selenium</code> ，效果最终都是一只的，只不过不显示而已：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.firefox.options <span class="keyword">import</span> Options</span><br><span class="line">options = Options()</span><br><span class="line">options.add_argument(<span class="string">'--headless'</span>)</span><br></pre></td></tr></table></figure><p>使用不同的浏览器只要替换 <code>webdriver</code> 下的包就可以了。</p><h3 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h3><h4 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找某一个元素如果没有立即找到就等待10秒</span></span><br><span class="line">firefox.implicitly_wait(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h4 id="显示等待"><a href="#显示等待" class="headerlink" title="显示等待"></a>显示等待</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> ec</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">sort_btn = WebDriverWait(fierfox, <span class="number">10</span>).until(</span><br><span class="line">    ec.presence_of_element_located(By.XPATH),</span><br><span class="line">    <span class="string">"//button"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>查找一个按钮，最常等待 <code>10</code> 秒，直到找到这个按钮。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Aug 01 2020 14:18:37 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;CMD-命令使用&quot;&gt;&lt;a href=&quot;#CMD-命令使用&quot; class=&quot;headerlink&quot; title=&quot;CMD 命令使用&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="爬虫" scheme="https://shijiazhuangbaifeng.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="https://shijiazhuangbaifeng.github.io/tags/Python/"/>
    
      <category term="爬虫" scheme="https://shijiazhuangbaifeng.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>MySql 高级</title>
    <link href="https://shijiazhuangbaifeng.github.io/2020/07/31/MySql%20%E9%AB%98%E7%BA%A7/"/>
    <id>https://shijiazhuangbaifeng.github.io/2020/07/31/MySql%20%E9%AB%98%E7%BA%A7/</id>
    <published>2020-07-31T09:23:44.969Z</published>
    <updated>2020-07-31T09:31:37.235Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Aug 01 2020 14:18:37 GMT+0800 (GMT+08:00) --><h1 id="MySql-高级"><a href="#MySql-高级" class="headerlink" title="MySql 高级"></a>MySql 高级</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>MYSQL</code> 高级的部分涉及的有：</p><ul><li>索引优化：在大的数据量查询情况下</li><li>数据库锁：防止库存超卖</li><li>数据库函数：在测试环境下，导出大量数据</li></ul><p>八字口诀：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">全职匹配我最爱，最左前缀要遵守；</span><br><span class="line"></span><br><span class="line">带头大哥不能死，中间兄弟不能断；</span><br><span class="line"></span><br><span class="line">索引列上少计算，范围之后全失效；</span><br><span class="line"></span><br><span class="line">LIKE百分写最右，覆盖索引不写*；</span><br><span class="line"></span><br><span class="line">不等空值还有OR，索引影响要注意；</span><br><span class="line"></span><br><span class="line">VAR引号不可丢，SQL优化有诀窍。</span><br></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p><code>Mysql</code> 官方对索引的定义是：索引 (<code>Index</code>) 是帮助 <code>MySql</code> 高效获取数据的数据结构可以得到索引的本质，索引是数据结构，可以理解：‘排好序的快速查找的数据结构’。</p><h3 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h3><table><thead><tr><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>单值索引</td><td>普通索引</td></tr><tr><td>复合索引</td><td>多个字段是一个索引</td></tr><tr><td>唯一索引</td><td>索引所在字段是惟一的</td></tr></tbody></table><h2 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p><code>Explain</code> 查看执行计划，可以模拟执行<code>SQL</code> 语句，从而知道 <code>mysql</code> 是如何执行我们的 <code>SQL</code> 语句，将一个 <code>Sql</code> 语句执行过程中， <code>Mysql</code> 引擎将执行参数列出来，分析 <code>SQL</code> 语句和表结构的性能瓶颈，进一步优化 <code>SQL</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM tbl_dept</span><br></pre></td></tr></table></figure><p>返回的内容有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="line">| id | select_type | table    | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |</span><br><span class="line">+----+-------------+----------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br></pre></td></tr></table></figure><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>表的读取顺序</li><li>数据读取操作的读取数据类型</li><li>哪些索引可以使用</li><li>哪些索引被实际使用</li><li>表之间的引用</li><li>每个表有多少行被优化器执行</li></ul><h3 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h3><table><thead><tr><th>字段</th><th>作用</th></tr></thead><tbody><tr><td><code>id</code></td><td><code>SQL</code> 语句在 <code>EXPLAIN</code> 的执行查询的序列号，表示查询中 <code>select</code> 子句或操作表的顺序，<code>ID</code> 越大执行越早，<code>id</code> 相同，从前往后执行。</td></tr><tr><td><code>select_type</code></td><td>查询语句类型</td></tr><tr><td><code>table</code></td><td>涉及到的表，可能是实际表和衍生表</td></tr><tr><td><code>type</code></td><td>显示查询索引使用何种数据类型 :<code>systen &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; all</code></td></tr><tr><td><code>key</code></td><td>实际使用的索引，如果没有使用则为 <code>NULL</code></td></tr><tr><td><code>key_len</code></td><td></td></tr></tbody></table><p><code>select_type</code> 的值有：</p><ul><li><code>SIMPLE</code> ：单表查询</li><li><code>DERIVED</code>：衍生表</li><li><code>PRIMARY</code> ：主查询</li><li><code>SUBQUERY</code>：子查询</li><li><code>UNION</code> <code>UNION RESULT</code>：联合查询</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Aug 01 2020 14:18:37 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;MySql-高级&quot;&gt;&lt;a href=&quot;#MySql-高级&quot; class=&quot;headerlink&quot; title=&quot;MySql 高级&quot;&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Elasticsearch</title>
    <link href="https://shijiazhuangbaifeng.github.io/2020/07/15/Eelasticsearch/"/>
    <id>https://shijiazhuangbaifeng.github.io/2020/07/15/Eelasticsearch/</id>
    <published>2020-07-15T02:53:21.000Z</published>
    <updated>2020-07-16T23:41:46.146Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Aug 01 2020 14:18:37 GMT+0800 (GMT+08:00) --><h2 id="安装-Elasticsearch"><a href="#安装-Elasticsearch" class="headerlink" title="安装 Elasticsearch"></a>安装 Elasticsearch</h2><h3 id="单机安装-Elasticsearch"><a href="#单机安装-Elasticsearch" class="headerlink" title="单机安装 Elasticsearch"></a>单机安装 Elasticsearch</h3><p>安装 <code>Elasticsearch</code> 需要的文件有：</p><ul><li>analysis-ik</li><li>cerebro-0.8.3</li><li>elasticsearch-6.3.1.tar.gz</li><li>elasticsearch-analysis-ik-5.6.4.zip</li><li>elasticsearch-analysis-ik6.rar</li><li>kibana-5.6.4-linux-x86_64.tar.gz</li><li>kibana-6.3.1-linux-x86_64.tar.gz</li></ul><ol><li><p>进入 <code>ubuntu</code> 服务器，创建目录，将以上的文件上传到该文件目录中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /url/<span class="built_in">local</span>/elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /url/<span class="built_in">local</span>/elasticsearch</span><br><span class="line"></span><br><span class="line">ls -la</span><br><span class="line"></span><br><span class="line">total 400136</span><br><span class="line">drwxr-xr-x  5 root root      4096 Jul 12 23:39 ./</span><br><span class="line">drwxr-xr-x 12 root root      4096 Jul 12 23:34 ../</span><br><span class="line">drwxrwxr-x  3 miao miao      4096 Jul 12 23:32 analysis-ik/</span><br><span class="line">drwxrwxr-x  5 miao miao      4096 Jul 12 23:32 cerebro-0.8.3/</span><br><span class="line">-rw-rw-r--  1 miao miao  52402153 Apr 24  2019 cerebro-0.8.3.zip</span><br><span class="line">-rw-rw-r--  1 miao miao  91429350 Apr 12  2019 elasticsearch-6.3.1.tar.gz</span><br><span class="line">-rw-rw-r--  1 miao miao   4502411 Apr 15  2018 elasticsearch-analysis-ik-5.6.4.zip</span><br><span class="line">-rw-rw-r--  1 miao miao   4128393 May 17  2019 elasticsearch-analysis-ik6.rar</span><br><span class="line">-rw-rw-r--  1 miao miao  51834711 Apr 15  2018 kibana-5.6.4-linux-x86_64.tar.gz</span><br><span class="line">-rw-rw-r--  1 miao miao 205397076 Apr 12  2019 kibana-6.3.1-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压 <code>elasticsearch-6.3.1.tar.gz</code> 进入文件中进行配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> elasticsearch-6.3.1</span><br></pre></td></tr></table></figure></li><li><p>运行 <code>Elasticsearch</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./elasticsearch</span><br><span class="line"></span><br><span class="line">nohup ./elasticsearch &amp;</span><br></pre></td></tr></table></figure></li><li><p>浏览器访问 <code>192.168.159.135:9200</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span> : <span class="string">"QNWRcMX"</span>,</span><br><span class="line">  <span class="attr">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="attr">"cluster_uuid"</span> : <span class="string">"0xiTx31VTxy8UUxaRR96AA"</span>,</span><br><span class="line">  <span class="attr">"version"</span> : &#123;</span><br><span class="line">    <span class="attr">"number"</span> : <span class="string">"6.3.1"</span>,</span><br><span class="line">    <span class="attr">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="attr">"build_type"</span> : <span class="string">"tar"</span>,</span><br><span class="line">    <span class="attr">"build_hash"</span> : <span class="string">"eb782d0"</span>,</span><br><span class="line">    <span class="attr">"build_date"</span> : <span class="string">"2018-06-29T21:59:26.107521Z"</span>,</span><br><span class="line">    <span class="attr">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"lucene_version"</span> : <span class="string">"7.3.1"</span>,</span><br><span class="line">    <span class="attr">"minimum_wire_compatibility_version"</span> : <span class="string">"5.6.0"</span>,</span><br><span class="line">    <span class="attr">"minimum_index_compatibility_version"</span> : <span class="string">"5.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>以上步骤进行完了以后还需要配置 <code>elasticsearch-6.3.1/config</code> 目录下的两个配置文件： <code>jvm.options</code> 和 <code>elasticsearch.yml</code> 两个配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 测试环境使用内存大小</span><br><span class="line">-Xms256</span><br><span class="line">-Xmx256</span><br></pre></td></tr></table></figure><p>在 <code>jvm.options</code> 中配置虚拟机的内存大小。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network.host:</span> <span class="number">192.168</span><span class="number">.159</span><span class="number">.135</span></span><br><span class="line"></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br></pre></td></tr></table></figure><p>如果不配置以上内存，<code>elastticsearch</code> 只能够在内网访问。</p><h4 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h4><ul><li><p><code>can not run elasticsearch as root</code></p><p>完整的错误信息如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">org.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root</span><br><span class="line">        at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:140) ~[elasticsearch-6.3.1.jar:6.3.1]</span><br><span class="line">        at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:127) ~[elasticsearch-6.3.1.jar:6.3.1]</span><br><span class="line">        at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86) ~[elasticsearch-6.3.1.jar:6.3.1]</span><br><span class="line">        at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124) ~[elasticsearch-cli-6.3.1.jar:6.3.1]</span><br><span class="line">        at org.elasticsearch.cli.Command.main(Command.java:90) ~[elasticsearch-cli-6.3.1.jar:6.3.1]</span><br><span class="line">        at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:93) ~[elasticsearch-6.3.1.jar:6.3.1]</span><br><span class="line">        at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:86) ~[elasticsearch-6.3.1.jar:6.3.1]</span><br><span class="line">Caused by: java.lang.RuntimeException: can not run elasticsearch as root</span><br><span class="line">        at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:104) ~[elasticsearch-6.3.1.jar:6.3.1]</span><br><span class="line">        at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:171) ~[elasticsearch-6.3.1.jar:6.3.1]</span><br><span class="line">        at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:326) ~[elasticsearch-6.3.1.jar:6.3.1]</span><br><span class="line">        at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:136) ~[elasticsearch-6.3.1.jar:6.3.1]</span><br><span class="line">        ... 6 more</span><br></pre></td></tr></table></figure><p>为了安全问题 <code>elasticsearch</code> 不能通过 <code>root</code> 账户直接启动，需要创建一个新的用户：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adduser es</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /url/<span class="built_in">local</span>/elasticsearch</span><br></pre></td></tr></table></figure></li><li><p><code>max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</code></p><p><code>Linux</code> 默认的最大线程数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br><span class="line"></span><br><span class="line">* hard nofile 655360</span><br><span class="line">* soft nofile 131072</span><br><span class="line">* hard nproc 4096</span><br><span class="line">* soft nproc 2048</span><br><span class="line"></span><br><span class="line">vim /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">vm.max_map_count=655360</span><br><span class="line">fs.file-max=655360</span><br><span class="line"></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></li></ul><h3 id="Elasticsearch-集群"><a href="#Elasticsearch-集群" class="headerlink" title="Elasticsearch 集群"></a>Elasticsearch 集群</h3><ol><li><p>修改配置文件 <code>elasticsearch.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集群名称（相同）</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">aubin-cluster</span>     </span><br><span class="line"><span class="comment"># 集群下节点的名称，节点名称，仅仅是描述名称，用于在日志中区分（自定义）</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">els1（必须不同）</span></span><br><span class="line"><span class="comment">#指定了该节点可能成为 master 节点，还可以是数据节点</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 数据的默认存放路径（自定义）</span></span><br><span class="line"><span class="attr">path.data:</span> <span class="string">/opt/data</span></span><br><span class="line"><span class="comment"># 日志的默认存放路径 </span></span><br><span class="line"><span class="attr">path.logs:</span> <span class="string">/opt/logs</span> </span><br><span class="line"><span class="comment"># 当前节点的IP地址 </span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span> </span><br><span class="line"><span class="comment"># 对外提供服务的端口</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span> </span><br><span class="line"><span class="comment">#9300为集群服务的端口 </span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9300</span></span><br><span class="line"><span class="comment"># 集群个节点IP地址，也可以使用域名，需要各节点能够解析 </span></span><br><span class="line"><span class="attr">discovery.zen.ping.unicast.hosts:</span> <span class="string">["172.18.68.11",</span> <span class="string">"172.18.68.12"</span><span class="string">,"172.18.68.13"]</span> </span><br><span class="line"><span class="comment"># 为了避免脑裂，集群节点数最少为 半数+1</span></span><br><span class="line"><span class="attr">discovery.zen.minimum_master_nodes:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>注意：清空<code>data</code>和<code>logs</code>数据</p></blockquote><h2 id="使用Elasticsearch"><a href="#使用Elasticsearch" class="headerlink" title="使用Elasticsearch"></a>使用Elasticsearch</h2><h3 id="Elasticsearch-交互方式"><a href="#Elasticsearch-交互方式" class="headerlink" title="Elasticsearch 交互方式"></a>Elasticsearch 交互方式</h3><p>通过 <code>HTTP</code> 协议，以 <code>JSON</code> 格式 <code>RESTFUL API</code>，<code>GET</code> <code>POST</code> <code>PUT</code> <code>DELETE</code> <code>HEAD</code></p><h3 id="Search-API"><a href="#Search-API" class="headerlink" title="Search API"></a>Search API</h3><h4 id="查询有哪些索引"><a href="#查询有哪些索引" class="headerlink" title="查询有哪些索引"></a>查询有哪些索引</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /_cat/indices?v</span><br></pre></td></tr></table></figure><p>表头的含义：</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td><code>health</code></td><td><code>green</code>(集群完整) <code>yellow</code>(单点正常、集群不完整) <code>red</code>(单点不正常)</td></tr><tr><td><code>status</code></td><td>是否能使用</td></tr><tr><td><code>index</code></td><td>索引</td></tr><tr><td><code>uuid</code></td><td>索引统一 <code>id</code></td></tr><tr><td><code>pri</code></td><td>主节点有几个</td></tr><tr><td><code>rep</code></td><td>从节点</td></tr><tr><td><code>docs.count</code></td><td>文档数</td></tr><tr><td><code>docs.delete</code></td><td>文档删除数</td></tr><tr><td><code>store.size</code></td><td>整体占空间大小</td></tr><tr><td><code>pri.store.size</code></td><td>主节点占空间大小</td></tr></tbody></table><h4 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h4><ul><li><p>增加一个索引：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT index_name</span><br></pre></td></tr></table></figure></li><li><p>添加一个文档</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PUT /index_name/type/id</span><br><span class="line">&#123;</span><br><span class="line">"filed":"value"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "_index": "miao",</span><br><span class="line">  "_type": "person",</span><br><span class="line">  "_id": "1",</span><br><span class="line">  "_version": 2,</span><br><span class="line">  "result": "updated",</span><br><span class="line">  "_shards": &#123;</span><br><span class="line">    "total": 2,</span><br><span class="line">    "successful": 1,</span><br><span class="line">    "failed": 0</span><br><span class="line">  &#125;,</span><br><span class="line">  "_seq_no": 1,</span><br><span class="line">  "_primary_term": 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一个索引中只能够存在一个 <code>type</code>，<code>PUT</code> 既能插入也能更新</p></blockquote></li><li><p>查询索引的信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">GET /index_name/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  # 占用空间</span><br><span class="line">  "took": 74,</span><br><span class="line">  "timed_out": false,</span><br><span class="line">  # 分片</span><br><span class="line">  "_shards": &#123;</span><br><span class="line">    "total": 5,</span><br><span class="line">    "successful": 5,</span><br><span class="line">    "skipped": 0,</span><br><span class="line">    "failed": 0</span><br><span class="line">  &#125;,</span><br><span class="line"># 命中信息</span><br><span class="line">  "hits": &#123;</span><br><span class="line">      # 命中数据量</span><br><span class="line">    "total": 3,</span><br><span class="line">      # 命中数据最大评分</span><br><span class="line">    "max_score": 1,</span><br><span class="line">    "hits": [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"miao"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"person"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"yindongfa"</span>,</span><br><span class="line">          <span class="attr">"age"</span>: <span class="number">19</span>,</span><br><span class="line">          <span class="attr">"sex"</span>: <span class="string">"woman"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"miao"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"person"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"miaochuntong"</span>,</span><br><span class="line">          <span class="attr">"age"</span>: <span class="number">18</span>,</span><br><span class="line">          <span class="attr">"sex"</span>: <span class="string">"man"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"miao"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"person"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"id"</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"fanzhengyao"</span>,</span><br><span class="line">          <span class="attr">"age"</span>: <span class="number">21</span>,</span><br><span class="line">          <span class="attr">"sex"</span>: <span class="string">"man"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="定义数据结构"><a href="#定义数据结构" class="headerlink" title="定义数据结构"></a>定义数据结构</h3><p><code>es</code> 通过 <code>mapping</code> 来定义数据结构，<code>es</code> 规定一个索引下面只能够有一个类型。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /atguigu/_mapping</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "atguigu": &#123;#索引名称</span><br><span class="line">    "mappings": &#123;#mapping设置</span><br><span class="line">      "student": &#123;#type名称</span><br><span class="line">        "properties": &#123;#字段属性</span><br><span class="line">          "clazz": &#123;</span><br><span class="line">            "type": "text",#字段类型，字符串默认类型</span><br><span class="line">            "fields": &#123;#子字段属性设置</span><br><span class="line">              "keyword": &#123;#分词类型（不分词）</span><br><span class="line">                "type": "keyword",</span><br><span class="line">                "ignore_above": 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          "description": &#123;</span><br><span class="line">            "type": "text",</span><br><span class="line">            "fields": &#123;</span><br><span class="line">              "keyword": &#123;</span><br><span class="line">                "type": "keyword",</span><br><span class="line">                "ignore_above": 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          "name": &#123;</span><br><span class="line">            "type": "text",</span><br><span class="line">            "fields": &#123;</span><br><span class="line">              "keyword": &#123;</span><br><span class="line">                "type": "keyword",</span><br><span class="line">                "ignore_above": 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="默认数据类型"><a href="#默认数据类型" class="headerlink" title="默认数据类型"></a>默认数据类型</h4><p><code>es</code> 规定了，<code>type</code> 的每一个字段的数据类型是什么都由 <code>Mapping</code> 规定，如果没有规定 <code>type</code> ，<code>es</code> 会根据数据类型来推定数据类型。</p><ul><li><h2 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h2></li></ul><p>分词是指将文本转换成一系列单词（<code>term or token</code>）的过程，也可以叫做文本分析，在es里面称为<code>Analysis</code>，<code>elasticsearch</code> 的分词器默认是英文分词器，不支持中文，所以需要安装中文分词器：</p><p>分词器下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik</a></p><h3 id="分词器机制"><a href="#分词器机制" class="headerlink" title="分词器机制"></a>分词器机制</h3><table><thead><tr><th align="left"><code>Character Filter</code></th><th align="left">对原始文本进行处理</th><th align="left">例：去除html标签、特殊字符等</th></tr></thead><tbody><tr><td align="left"><code>Tokenizer</code></td><td align="left">将原始文本进行分词</td><td align="left">例：培训机构–&gt;培训，机构</td></tr><tr><td align="left"><code>Token Filters</code></td><td align="left">分词后的关键字进行加工</td><td align="left">例：转小写、删除语气词、近义词和同义词等</td></tr></tbody></table><h3 id="安装分词器"><a href="#安装分词器" class="headerlink" title="安装分词器"></a>安装分词器</h3><p>下载 <code>IK</code> 中文分词器对应的 <code>Elastisearch</code> 版本，解压到 <code>elasticsearch/plugins/ik</code> 目录下。</p><h3 id="测试分词器"><a href="#测试分词器" class="headerlink" title="测试分词器"></a>测试分词器</h3><ul><li><p><code>ik_smart</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  "analyzer": "ik_smart", </span><br><span class="line">  "text": "我的名字是姚明"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分词结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"我"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"的"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"名字"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"是"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"姚明"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">7</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>ik_max_word</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  "analyzer": "ik_max_word", </span><br><span class="line">  "text": "我的名字是姚明"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分词结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"我"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"的"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"名字"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"是"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"姚明"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">7</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="相关度算分"><a href="#相关度算分" class="headerlink" title="相关度算分"></a>相关度算分</h3><p>相关性算分：指文档与查询语句间的相关度，通过倒排索引可以获取与查询语句相匹配的文档列表</p><p>如何将最符合用户查询需求的文档放到前列呢？</p><p>本质问题是一个排序的问题，排序的依据是相关性算分，确定倒排索引哪个文档排在前面</p><p>影响相关度算分的参数：</p><p>1、TF(Term Frequency)：词频，即单词在文档中出现的次数，词频越高，相关度越高</p><p>2、Document Frequency(DF)：文档词频，即单词出现的文档数</p><p>3、IDF(Inverse Document Frequency)：逆向文档词频，与文档词频相反，即1/DF。即单词出现的文档数越少，相关度越高（如果一个单词在文档集出现越少，算为越重要单词）</p><p>4、Field-length Norm：文档越短，相关度越高</p><h2 id="Elasticsearch-数据导入"><a href="#Elasticsearch-数据导入" class="headerlink" title="Elasticsearch 数据导入"></a>Elasticsearch 数据导入</h2><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Aug 01 2020 14:18:37 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;安装-Elasticsearch&quot;&gt;&lt;a href=&quot;#安装-Elasticsearch&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="分布式" scheme="https://shijiazhuangbaifeng.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="https://shijiazhuangbaifeng.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="全文检索" scheme="https://shijiazhuangbaifeng.github.io/tags/%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV</title>
    <link href="https://shijiazhuangbaifeng.github.io/2020/07/13/OpenCV/"/>
    <id>https://shijiazhuangbaifeng.github.io/2020/07/13/OpenCV/</id>
    <published>2020-07-13T02:53:21.000Z</published>
    <updated>2020-07-15T05:09:25.336Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Aug 01 2020 14:18:37 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Aug 01 2020 14:18:37 GMT+0800 (GMT+08:00) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
    
      <category term="图像识别" scheme="https://shijiazhuangbaifeng.github.io/categories/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"/>
    
    
      <category term="数据分析" scheme="https://shijiazhuangbaifeng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="数据可视化" scheme="https://shijiazhuangbaifeng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="python第三方库" scheme="https://shijiazhuangbaifeng.github.io/tags/python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Pandas</title>
    <link href="https://shijiazhuangbaifeng.github.io/2020/07/13/Pandas/"/>
    <id>https://shijiazhuangbaifeng.github.io/2020/07/13/Pandas/</id>
    <published>2020-07-13T02:53:21.000Z</published>
    <updated>2020-07-23T14:16:54.921Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Aug 01 2020 14:18:37 GMT+0800 (GMT+08:00) --><p><code>pandas</code> 是使 <code>python</code> 成为强大数据分析的语言原因之一，其中最重要的是：</p><ul><li><code>DataFrame</code>：数据表格，二维（行、列）</li><li><code>Series</code>：一维</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图、可视化</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pylab <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><p>导入数据分析三剑客。</p><h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><p><code>Series</code> 是一组类似一位数组的的对象，由以下两部分组成：</p><ul><li>values：一组数据(<code>ndarray</code>类型)</li><li>index：相关数据的索引标签</li></ul><h3 id="Series-的创建"><a href="#Series-的创建" class="headerlink" title="Series 的创建"></a>Series 的创建</h3><ol><li><p>由列表或者 <code>ndarray</code> 创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">series = Series(data = np.random.randint(<span class="number">10</span>,<span class="number">100</span>,size=<span class="number">10</span>), index=list(<span class="string">'asdfghjklq'</span>), name=<span class="string">'Python'</span>)</span><br><span class="line"></span><br><span class="line">series</span><br></pre></td></tr></table></figure><ul><li><code>data</code> ： 相当于 <code>values</code></li><li><code>name</code> ： 相当于去一个名字</li></ul></li><li><p>通过字典来创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">series = Series(&#123;<span class="string">'a'</span>:<span class="number">100</span>, <span class="string">'b'</span>:<span class="number">90</span>, <span class="string">'c'</span>:<span class="number">80</span>&#125;, name=<span class="string">'Python'</span>)</span><br><span class="line"></span><br><span class="line">series</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>如果不指定 <code>Series</code> 的索引，默认就会创建整数类型的索引</p></blockquote><p>查看 <code>series</code> 的类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type(series)</span><br><span class="line"></span><br><span class="line">pandas.core.series.Series</span><br></pre></td></tr></table></figure><h3 id="Series-索引"><a href="#Series-索引" class="headerlink" title="Series 索引"></a>Series 索引</h3><ol><li><p>普通索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">series[<span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line">series[[<span class="string">'a'</span>,<span class="string">'b'</span>]]</span><br></pre></td></tr></table></figure></li><li><p>隐式索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">series[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 默认的索引</span></span><br><span class="line">series.iloc[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 和原来一抹一样</span></span><br><span class="line">series.loc[<span class="string">'a'</span>]</span><br></pre></td></tr></table></figure></li></ol><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>可以将 <code>Series</code> 看做成是有一个有定长度的有序字典，可以通过 <code>shape</code> 、 <code>index</code> 、 <code>values</code> 和 <code>size</code> 得到 <code>series</code> 的属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">series.shape</span><br><span class="line"></span><br><span class="line">(<span class="number">10</span>,)</span><br><span class="line"></span><br><span class="line">series.index</span><br><span class="line"></span><br><span class="line">Index([<span class="string">'a'</span>, <span class="string">'s'</span>, <span class="string">'d'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'q'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line"></span><br><span class="line">series.values</span><br><span class="line"></span><br><span class="line">array([<span class="number">39</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">86</span>, <span class="number">53</span>, <span class="number">30</span>, <span class="number">98</span>, <span class="number">20</span>, <span class="number">14</span>, <span class="number">52</span>])</span><br><span class="line"></span><br><span class="line">series.size</span><br><span class="line"></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>可以通过 <code>head()</code> 和 <code>tail()</code> 来方便的查看 <code>series</code> 的样式，默认显示前五个和后五个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">series.head()</span><br><span class="line"></span><br><span class="line">series.tail()</span><br></pre></td></tr></table></figure><p>使用 <code>isnull</code> 和 <code>notnull</code> 查看是否为空：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">series.isnull()</span><br><span class="line"></span><br><span class="line">series.notnull()</span><br></pre></td></tr></table></figure><h3 id="Series-的运算"><a href="#Series-的运算" class="headerlink" title="Series 的运算"></a>Series 的运算</h3><p>适用于 <code>ndarry</code> 的运算同样都适合 <code>series</code></p><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><h3 id="DataFrame-创建"><a href="#DataFrame-创建" class="headerlink" title="DataFrame 创建"></a>DataFrame 创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DataFrame(data=&#123;<span class="string">'Python'</span>: np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=<span class="number">5</span>), </span><br><span class="line">                <span class="string">'Math'</span>: np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=<span class="number">5</span>), </span><br><span class="line">                <span class="string">'En'</span>: np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=<span class="number">5</span>)&#125;, index=list(<span class="string">'abcde'</span>))</span><br></pre></td></tr></table></figure><p>第二种方式，直接指定，列名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataFrame(data=np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">10</span>,<span class="number">5</span>)), index=list(<span class="string">'asdfgzxcvb'</span>), columns=[<span class="string">'Python'</span>, <span class="string">'JAVA'</span>, <span class="string">'C++'</span>, <span class="string">'C'</span>, <span class="string">'GO'</span>])</span><br></pre></td></tr></table></figure><h3 id="保存与读取"><a href="#保存与读取" class="headerlink" title="保存与读取"></a>保存与读取</h3><ol><li><p>保存为 <code>csv</code> 文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.to_csv(<span class="string">'./data.csv'</span>)</span><br></pre></td></tr></table></figure></li><li><p>保存为 <code>excel</code> 文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.to_excel(<span class="string">'./data.xlsx'</span>)</span><br></pre></td></tr></table></figure><p>保存为 <code>excel</code> 文件，需要安装 <code>openpyxl</code> 文件</p></li><li><p>读取指定的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">'data.csv'</span>)</span><br><span class="line">data = data.rename(&#123;<span class="string">'Unnamed: 0'</span>:<span class="string">'index'</span>&#125;, axis=<span class="number">1</span>)</span><br><span class="line">data.set_index(keys= <span class="string">'index'</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="DataFrame-的属性"><a href="#DataFrame-的属性" class="headerlink" title="DataFrame 的属性"></a>DataFrame 的属性</h3><ul><li><p><code>index</code> ，返回所有的索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.index</span><br></pre></td></tr></table></figure></li><li><p><code>columns</code> 列的列名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.columns</span><br></pre></td></tr></table></figure></li><li><p><code>shape</code> 数组格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.shape</span><br></pre></td></tr></table></figure></li></ul><h3 id="DataFrame-索引"><a href="#DataFrame-索引" class="headerlink" title="DataFrame 索引"></a>DataFrame 索引</h3><ol><li><p>通过列进行索引</p><ul><li><p>通过字典的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'Python'</span>]</span><br></pre></td></tr></table></figure></li><li><p>通过属性的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.Python</span><br></pre></td></tr></table></figure></li></ul><p>返回的是一个 <code>Series</code> 对象，所以 <code>DataFrame</code> 是由多个 <code>Series</code>组成，他们共用一个 <code>index</code></p></li><li><p>通过行索引获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.iloc[[<span class="number">1</span>,<span class="number">2</span>]]</span><br></pre></td></tr></table></figure><p>如果取一个就是 <code>Series</code></p></li><li><p>切片</p><p>直接使用切片，不能对列进行切片，但是可以对行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'a'</span>:<span class="string">'f'</span>]</span><br></pre></td></tr></table></figure></li><li><p>列切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.iloc[:,<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure></li></ol><h3 id="DataFrame-的运算"><a href="#DataFrame-的运算" class="headerlink" title="DataFrame 的运算"></a>DataFrame 的运算</h3><ul><li><p>相关度计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.corr()</span><br></pre></td></tr></table></figure></li><li><p>方差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.var()</span><br></pre></td></tr></table></figure></li><li><p><code>DataFrame</code> 的基本信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.info()</span><br></pre></td></tr></table></figure></li></ul><h3 id="DataFrame-之间的运算"><a href="#DataFrame-之间的运算" class="headerlink" title="DataFrame 之间的运算"></a>DataFrame 之间的运算</h3><ul><li><p><code>dataFrame.add()</code> 两者相加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_class_01 + data_class_02</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h3><p>最常见的无效数据是 <code>np.NaN</code> 和 <code>None</code>，针对这些数据我们需要找到，然后进行清洗。</p><h2 id="数据级联"><a href="#数据级联" class="headerlink" title="数据级联"></a>数据级联</h2><p><code>DataFrame</code> 的数据级联方式和 <code>NdArray</code> 几乎完全一样。</p><h3 id="简单拼接"><a href="#简单拼接" class="headerlink" title="简单拼接"></a>简单拼接</h3><p>行与行之间的拼接，也是最简单的拼接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df1 = DataFrame(data = np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">5</span>,<span class="number">3</span>)), index=list(<span class="string">'ABCDE'</span>), columns=[<span class="string">'Python'</span>,<span class="string">'C++'</span>,<span class="string">'JAVA'</span>])</span><br><span class="line"></span><br><span class="line">df2 = DataFrame(data = np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">5</span>,<span class="number">3</span>)), index=list(<span class="string">'ABCDE'</span>), columns=[<span class="string">'Python'</span>,<span class="string">'C++'</span>,<span class="string">'JAVA'</span>])</span><br><span class="line"></span><br><span class="line">display(df1,df2)</span><br><span class="line"></span><br><span class="line">pd.concat([df1, df2])</span><br></pre></td></tr></table></figure><p>通过 <code>axis</code> 的值，来设值列之间的拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df3 = DataFrame(data = np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">5</span>,<span class="number">2</span>)), index=list(<span class="string">'ABCDE'</span>), columns=[<span class="string">'C#'</span>,<span class="string">'C'</span>])</span><br><span class="line"></span><br><span class="line">pd.concat([df1,df2], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p><code>concat</code> 函数有 <code>join</code> 参数，作用：</p><ul><li><code>inner</code> 两者共同索引才会合并</li><li><code>outher</code>合并所有</li></ul><p><code>ignore_index</code> 表示是否忽略行索引，重新制定，从 <code>0</code> 开始。</p><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><p><code>merge</code> 和 <code>concat</code> 不同的是， <code>merge</code> 会根据相同的属性值进行组合。</p><h3 id="一对一合并"><a href="#一对一合并" class="headerlink" title="一对一合并"></a>一对一合并</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df1 = DataFrame(data = &#123;<span class="string">'id'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], <span class="string">'name'</span>:[<span class="string">'王五'</span>,<span class="string">'咋说'</span>,<span class="string">'zhaoliu'</span>,<span class="string">'曾小贤'</span>,<span class="string">'先把宝宝'</span>],<span class="string">'age'</span>:[<span class="number">18</span>,<span class="number">58</span>,<span class="number">12</span>,<span class="number">34</span>,<span class="number">25</span>]&#125;)</span><br><span class="line"></span><br><span class="line">df1</span><br><span class="line"></span><br><span class="line">df2 = DataFrame(data = &#123;<span class="string">'id'</span>:[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>], <span class="string">'salary'</span> : [<span class="number">1500</span>,<span class="number">2500</span>,<span class="number">3000</span>]&#125;)</span><br><span class="line"></span><br><span class="line">df2</span><br><span class="line"></span><br><span class="line">df1.merge(df2)</span><br></pre></td></tr></table></figure><h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df3 = DataFrame(data = &#123;<span class="string">'id'</span>:[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], <span class="string">'salary'</span> : [<span class="number">1500</span>,<span class="number">2500</span>,<span class="number">3000</span>]&#125;)</span><br><span class="line"></span><br><span class="line">df3</span><br><span class="line"></span><br><span class="line">df1.merge(df3)</span><br></pre></td></tr></table></figure><h3 id="on"><a href="#on" class="headerlink" title="on"></a>on</h3><p>当合并的的列，两个 <code>DataFrame</code> 的列不同可以调整 <code>left_on</code> 和 <code>right_on</code></p><h3 id="内合并和外合并"><a href="#内合并和外合并" class="headerlink" title="内合并和外合并"></a>内合并和外合并</h3><p>参数 <code>how</code> 的值可以有：</p><ul><li><code>outher</code> 无论对不对其都保留</li><li><code>inner</code> 只保留对齐的</li><li><code>left</code> 保留左边的</li><li><code>right</code> 保留右边的</li></ul><h2 id="多层索引"><a href="#多层索引" class="headerlink" title="多层索引"></a>多层索引</h2><p>多层索引就是在一层索引下还可以有索引，最方便的创建方法是给 <code>index</code> 参数，传递两个或更多的数组。</p><h3 id="Series-1"><a href="#Series-1" class="headerlink" title="Series"></a>Series</h3><p><code>Series</code> 也可以创建多层索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 双层索引</span></span><br><span class="line">Series(np.random.randint(<span class="number">0</span>, <span class="number">150</span>, size=<span class="number">6</span>), index=pd.MultiIndex.from_product([list(<span class="string">'ABC'</span>),[<span class="string">'期末'</span>,<span class="string">'期中'</span>]]))</span><br></pre></td></tr></table></figure><h3 id="显示构造-pd-MultiIndex"><a href="#显示构造-pd-MultiIndex" class="headerlink" title="显示构造 pd.MultiIndex"></a>显示构造 <code>pd.MultiIndex</code></h3><ul><li><p>使用数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Series(np.random.randint(<span class="number">0</span>, <span class="number">150</span>, size=<span class="number">4</span>), index=pd.MultiIndex.from_arrays(</span><br><span class="line">           [list(<span class="string">'AABB'</span>),[<span class="string">'期末'</span>,<span class="string">'期中'</span>,<span class="string">'期末'</span>,<span class="string">'期中'</span>]]</span><br><span class="line">       )</span><br><span class="line">      )</span><br></pre></td></tr></table></figure><p>使用数组，需要将每一层的索引都准备好。</p></li><li><p>使用 <code>product</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Series(np.random.randint(<span class="number">0</span>, <span class="number">150</span>, size=<span class="number">15</span>), </span><br><span class="line">       index=pd.MultiIndex.from_product([list(<span class="string">'ABCDE'</span>),</span><br><span class="line">                                        [<span class="string">'Python'</span>,<span class="string">'C++'</span>,<span class="string">'C'</span>]])</span><br><span class="line">      )</span><br></pre></td></tr></table></figure></li></ul><h3 id="DataFrame-1"><a href="#DataFrame-1" class="headerlink" title="DataFrame"></a>DataFrame</h3><p><code>DataFrame</code> 和 <code>Series</code> 创建多层索引的方式一样。</p><blockquote><p>多层索引既可以是行，也可以是列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DataFrame(np.random.randint(<span class="number">0</span>,<span class="number">150</span>,size=(<span class="number">5</span>,<span class="number">6</span>)), index=list(<span class="string">'ABCDE'</span>), </span><br><span class="line">          columns=pd.MultiIndex.from_product([[<span class="string">'Python'</span>, <span class="string">'C++'</span>, <span class="string">'C'</span>], [<span class="string">'期末'</span>,<span class="string">'期中'</span>]]))</span><br></pre></td></tr></table></figure></blockquote><h4 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h4><ul><li><p>字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'Python'</span>]</span><br></pre></td></tr></table></figure></li><li><p>属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.Python</span><br></pre></td></tr></table></figure></li><li><p>调用行（<code>iloc</code>），返回一行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.iloc[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据聚合"><a href="#数据聚合" class="headerlink" title="数据聚合"></a>数据聚合</h2><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Aug 01 2020 14:18:37 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;code&gt;pandas&lt;/code&gt; 是使 &lt;code&gt;python&lt;/code&gt; 成为强大数据分析的语言原因之一，其中最重要的是：&lt;/p&gt;&lt;
      
    
    </summary>
    
    
      <category term="Python" scheme="https://shijiazhuangbaifeng.github.io/categories/Python/"/>
    
    
      <category term="数据分析" scheme="https://shijiazhuangbaifeng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="数据可视化" scheme="https://shijiazhuangbaifeng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="python第三方库" scheme="https://shijiazhuangbaifeng.github.io/tags/python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Numpy</title>
    <link href="https://shijiazhuangbaifeng.github.io/2020/07/08/Numpy/"/>
    <id>https://shijiazhuangbaifeng.github.io/2020/07/08/Numpy/</id>
    <published>2020-07-08T02:53:21.000Z</published>
    <updated>2020-07-10T14:09:00.599Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Aug 01 2020 14:18:37 GMT+0800 (GMT+08:00) --><p>NumPy是Python中科学计算的基础包。它是一个Python库，提供多维数组对象，各种派生对象（如掩码数组和矩阵），以及用于数组快速操作的各种API，有包括数学、逻辑、形状操作、排序、选择、输入输出、离散傅立叶变换、基本线性代数，基本统计运算和随机模拟等等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy</span><br></pre></td></tr></table></figure><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><p>根据已有的 <code>array</code> 对象，来创建经过 <code>numpy</code> 增强以后的 <code>ndarray</code> 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">l = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line">l = np.array(l)</span><br><span class="line"></span><br><span class="line">type(l)</span><br></pre></td></tr></table></figure><h3 id="生成数组"><a href="#生成数组" class="headerlink" title="生成数组"></a>生成数组</h3><h4 id="ones"><a href="#ones" class="headerlink" title="ones"></a>ones</h4><p>生成一个<code>ndarray</code> 数组的元素全部为 <code>1</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.ones(shape=(<span class="number">5</span>,<span class="number">5</span>), dtype=np.int8)</span><br></pre></td></tr></table></figure><p><code>shape</code> 表示生成数组形状，例如上面的生成二维的数组，第一维和第二维都分别有 <code>5</code> 的元素，<code>dtype</code> 表示元素类型。</p><h4 id="zeros"><a href="#zeros" class="headerlink" title="zeros"></a>zeros</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.zeros(shape=(<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>), dtype=np.float)</span><br></pre></td></tr></table></figure><p>效果同上，生成元素为 <code>0</code> 的数组。</p><h4 id="full"><a href="#full" class="headerlink" title="full"></a>full</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.full(shape=(<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>), fill_value=<span class="number">3.14</span>)</span><br></pre></td></tr></table></figure><p>自定义填充数组元素的值。</p><h4 id="eye"><a href="#eye" class="headerlink" title="eye"></a>eye</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.eye(N=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>生成单位矩阵。</p><h4 id="linespace"><a href="#linespace" class="headerlink" title="linespace"></a>linespace</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.linspace(<span class="number">0</span>,<span class="number">100</span>,<span class="number">101</span>)</span><br></pre></td></tr></table></figure><p>左闭右闭，等差数列，上一个的差和下一个的差永远相等。</p><h4 id="arange"><a href="#arange" class="headerlink" title="arange"></a>arange</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">0</span>,<span class="number">100</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>这个函数和 <code>range</code> 函数效果几乎完全相同。</p><h4 id="正太分布"><a href="#正太分布" class="headerlink" title="正太分布"></a>正太分布</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.randn(<span class="number">4</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>平均值为 <code>0</code> ，方差是 <code>1</code>，这个函数是固定的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n = np.random.normal(loc=<span class="number">175</span>,scale=<span class="number">2</span>,size=<span class="number">100</span>).round(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><code>normal</code> 可以指定 平均值和方差，<code>round</code>函数表示保留的小数位。</p><h2 id="数据方法"><a href="#数据方法" class="headerlink" title="数据方法"></a>数据方法</h2><h3 id="round"><a href="#round" class="headerlink" title="round"></a>round</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n = np.random.normal(loc=<span class="number">175</span>,scale=<span class="number">2</span>,size=<span class="number">100</span>).round(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>指定数据元素保留的小数位。</p><h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><h3 id="np-sin"><a href="#np-sin" class="headerlink" title="np.sin"></a>np.sin</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sin(n)</span><br></pre></td></tr></table></figure><p>对 <code>n</code> 的每一个元素进行 <code>sin</code> 操作。</p><h2 id="ndarray"><a href="#ndarray" class="headerlink" title="ndarray"></a>ndarray</h2><h3 id="ndarray属性"><a href="#ndarray属性" class="headerlink" title="ndarray属性"></a>ndarray属性</h3><table><thead><tr><th>属性/方法</th><th>作用</th></tr></thead><tbody><tr><td><code>shape</code></td><td>数组对象的格式</td></tr><tr><td><code>dtype</code></td><td>数组元素类型</td></tr><tr><td><code>ndim</code></td><td>数组维度</td></tr><tr><td><code>size</code></td><td>数组元素个数</td></tr><tr><td><code>nbytes</code></td><td>数组元素消耗的总字节数</td></tr><tr><td><code>reshape(shape[, order])</code></td><td>返回包含具有新形状的相同数据的数组。</td></tr></tbody></table><h3 id="切片操作"><a href="#切片操作" class="headerlink" title="切片操作"></a>切片操作</h3><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Aug 01 2020 14:18:37 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;NumPy是Python中科学计算的基础包。它是一个Python库，提供多维数组对象，各种派生对象（如掩码数组和矩阵），以及用于数组快速操作的各
      
    
    </summary>
    
    
      <category term="Python" scheme="https://shijiazhuangbaifeng.github.io/categories/Python/"/>
    
    
      <category term="数据分析" scheme="https://shijiazhuangbaifeng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="python第三方库" scheme="https://shijiazhuangbaifeng.github.io/tags/python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib</title>
    <link href="https://shijiazhuangbaifeng.github.io/2020/07/08/matplotlib/"/>
    <id>https://shijiazhuangbaifeng.github.io/2020/07/08/matplotlib/</id>
    <published>2020-07-08T02:53:21.000Z</published>
    <updated>2020-07-08T04:00:12.015Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Aug 01 2020 14:18:37 GMT+0800 (GMT+08:00) --><p><code>Matplotlib</code>用来绘制图表的工具，数据可视化，能够绘制柱状图，直方图，折线图等图表，安装<code>Matplotlib</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure><h2 id="绘制折线图"><a href="#绘制折线图" class="headerlink" title="绘制折线图"></a>绘制折线图</h2><p>使用<code>Matplotlib</code>绘图要使用<code>pyplot</code>这个模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pyplot</span><br></pre></td></tr></table></figure><p><code>pyplot</code>关于图表的基本方法如下：</p><table><thead><tr><th>方法</th><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>pyplot.title()</code></td><td><code>label</code>：图表的名称</td><td>当前图表的名称</td></tr><tr><td><code>pyplot.rcParams[&#39;font.sans-serif&#39;]</code></td><td>赋予一个字符串，字体</td><td>设置字体，对中文进行支持</td></tr><tr><td><code>pyplot.xlabel()</code></td><td><code>xlabel</code>：x轴的名称</td><td>设置x轴名称</td></tr><tr><td><code>pyplot.ylabel()</code></td><td><code>ylabel</code>：y轴的名称</td><td>设置y轴名称</td></tr><tr><td><code>pyplot.show()</code></td><td></td><td>将内存的表展示出来，重新绘制</td></tr><tr><td><code>pyplot.savefig()</code></td><td>第一个参数为名称</td><td>保存为图片</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pylot</span><br><span class="line"></span><br><span class="line"><span class="comment"># title 图标的标题</span></span><br><span class="line">pylot.title(<span class="string">'折线图'</span>)</span><br><span class="line"><span class="comment"># 中文标题</span></span><br><span class="line">pylot.rcParams[<span class="string">'font.sans-serif'</span>] = <span class="string">'Kaiti'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直线</span></span><br><span class="line"><span class="comment"># pylot.plot((1,4),(2,8))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 坐标</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]</span><br><span class="line">y = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 折线 linewidth 宽度</span></span><br><span class="line">pylot.plot(x, y, linewidth=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x 轴名称</span></span><br><span class="line">pylot.xlabel(<span class="string">'x轴'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y 轴的名称</span></span><br><span class="line">pylot.ylabel(<span class="string">'y轴'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示</span></span><br><span class="line">pylot.show()</span><br></pre></td></tr></table></figure><h3 id="绘制一元二次方程"><a href="#绘制一元二次方程" class="headerlink" title="绘制一元二次方程"></a>绘制一元二次方程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pylot</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># x 和 y 的值</span></span><br><span class="line">x = np.linspace(<span class="number">-10</span>, <span class="number">10</span>, <span class="number">100</span>, dtype=float)</span><br><span class="line">y = x ** <span class="number">-1</span></span><br><span class="line">print(x)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pylot.axhline(0)</span></span><br><span class="line">pylot.axvline(<span class="number">0</span>, color=<span class="string">'red'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 折线 linewidth 宽度</span></span><br><span class="line">pylot.plot(x, y, linewidth=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x 轴名称</span></span><br><span class="line">pylot.xlabel(<span class="string">'x'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y 轴的名称</span></span><br><span class="line">pylot.ylabel(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line">pylot.savefig(<span class="string">"一元二次方程"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示</span></span><br><span class="line">pylot.show()</span><br></pre></td></tr></table></figure><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><p><code>sublot</code>将画布分为<code>n</code>行<code>n</code>列，并进入某一块分区：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分区</span></span><br><span class="line">pylot.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><p>想要切换分区再次调用即可，但是行列要和上一次一致</p></blockquote><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><p>散点图使用的是<code>scatter</code>方法，该方法有以下参数：</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>x</code></td><td>一个集合，存放<code>x</code></td></tr><tr><td><code>y</code></td><td>一个集合，存放<code>y</code></td></tr><tr><td><code>s</code></td><td>大小，一个集合，要和点的个数一致</td></tr><tr><td><code>c</code></td><td>颜色，和<code>s</code>相同</td></tr><tr><td><code>alpha</code></td><td>透明度<code>0~1</code></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> ploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等差数列</span></span><br><span class="line">x = np.random.randint(<span class="number">10</span>,<span class="number">100</span>,<span class="number">50</span>)</span><br><span class="line">y = np.random.randint(<span class="number">10</span>,<span class="number">100</span>,<span class="number">50</span>)</span><br><span class="line"><span class="comment"># size</span></span><br><span class="line">size = np.random.randint(<span class="number">50</span>,<span class="number">500</span>,<span class="number">50</span>)</span><br><span class="line"><span class="comment"># color</span></span><br><span class="line">color = np.random.randint(<span class="number">10</span>,<span class="number">100</span>,<span class="number">50</span>)</span><br><span class="line"><span class="comment"># 绘制散点图</span></span><br><span class="line">ploy.scatter(x,y,s=size,alpha=<span class="number">0.5</span>,c=color)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示</span></span><br><span class="line">ploy.show()</span><br></pre></td></tr></table></figure><h2 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h2><p>在绘制折线图的时候，会绘制许多条线，每一条线使用不同的样式来描述，需要一块内容来描述每一条线的作用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pylot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 x</span></span><br><span class="line">x = np.linspace(<span class="number">-10</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">sin_y = np.sin(x)</span><br><span class="line">cos_y = np.cos(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制</span></span><br><span class="line">pylot.plot(x, sin_y, <span class="string">'--y'</span>, label=<span class="string">'sin'</span>)</span><br><span class="line">pylot.plot(x, cos_y, <span class="string">'-g'</span>, label=<span class="string">'cos'</span>)</span><br><span class="line"></span><br><span class="line">pylot.axhline(<span class="number">0</span>, c=<span class="string">"#FF6347"</span>, ls=<span class="string">"--"</span>, lw=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图例 loc : 图例的位置 labels : 每一个线条的注释 lines : 每一个线条的样式</span></span><br><span class="line">pylot.legend(loc=<span class="string">'upper left'</span>)  <span class="comment"># fancybox边框 framealpha透明度 shadow明影边框宽度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示</span></span><br><span class="line">pylot.show()</span><br></pre></td></tr></table></figure><p><code>plot</code>的<code>label</code>参数就是图例的信息，<code>legend</code>显示图例，默认是不显示的，接收一个参数，图例所在的位置.</p><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><p>在<code>plot</code>函数中还接受一个参数<code>fmt</code>格式化线条：</p><center>color</center><table><thead><tr><th>字符</th><th>颜色</th><th>字符</th><th>颜色</th><th>字符</th><th>颜色</th><th>字符</th><th>颜色</th></tr></thead><tbody><tr><td><strong>b</strong></td><td>蓝色</td><td><strong>r</strong></td><td>红色</td><td><strong>m</strong></td><td>洋红色</td><td><strong>k</strong></td><td>黑色</td></tr><tr><td><strong>g</strong></td><td>绿色</td><td><strong>c</strong></td><td>青色</td><td><strong>y</strong></td><td>黄色</td><td><strong>w</strong></td><td>白色</td></tr></tbody></table><center>marker</center><table><thead><tr><th>字符</th><th>标记</th><th>字符</th><th>标记</th><th>字符</th><th>标记</th><th>字符</th><th>标记</th></tr></thead><tbody><tr><td>.</td><td>点标记</td><td>&gt;</td><td>右三角标记</td><td>p</td><td>五边形标记</td><td>D</td><td>菱形标记</td></tr><tr><td>,</td><td>像素标记</td><td>1</td><td>三叉戟标记</td><td>*</td><td>星形标记</td><td>d</td><td>菱形标记</td></tr><tr><td>o</td><td>圆圈标记</td><td>2</td><td>三叉戟标记</td><td>h</td><td>六角形标记</td><td></td><td></td></tr><tr><td>v</td><td>倒三角标记</td><td>3</td><td>三叉戟标记</td><td>H</td><td>六角形标记</td><td>_</td><td>横线标记</td></tr><tr><td>^</td><td>正三角标记</td><td>4</td><td>三叉戟标记</td><td>+</td><td>+标记</td><td></td><td></td></tr><tr><td>&lt;</td><td>左三角标记</td><td>s</td><td>正方形标记</td><td>x</td><td>x标记</td><td></td><td>&lt;</td></tr></tbody></table><center>line</center><table><thead><tr><th>字符</th><th>格式</th><th>字符</th><th>格式</th><th>字符</th><th>格式</th><th>字符</th><th>格式</th></tr></thead><tbody><tr><td><strong>-</strong></td><td>实线</td><td><strong>–</strong></td><td>虚线</td><td><strong>-.</strong></td><td>点划线</td><td><strong>:</strong></td><td>点线</td></tr></tbody></table><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><p>绘制柱状图使用的函数的<code>bar</code>和<code>barh</code>，<code>barh</code>是用来绘制水平方向的柱状图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pyplot</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 年份</span></span><br><span class="line">x = [<span class="string">'1980'</span>, <span class="string">'1981'</span>, <span class="string">'1982'</span>]</span><br><span class="line"><span class="comment"># 销量</span></span><br><span class="line">y = [<span class="number">2000</span>, <span class="number">3000</span>, <span class="number">4000</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制柱状图</span></span><br><span class="line">pyplot.bar(x, y, width=<span class="number">0.5</span>) <span class="comment"># width 在原来的宽度倍数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 水平方向绘制</span></span><br><span class="line">pyplot.barh(x, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x 坐标的值</span></span><br><span class="line"><span class="comment"># yplot.xticks()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示</span></span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure><blockquote><p><code>xticks</code>用来修改<code>x</code>坐标上x的值</p></blockquote><h3 id="电影票销量"><a href="#电影票销量" class="headerlink" title="电影票销量"></a>电影票销量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pyplot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中文标题</span></span><br><span class="line">pyplot.rcParams[<span class="string">'font.sans-serif'</span>] = <span class="string">'Kaiti'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 电影</span></span><br><span class="line">movie = [<span class="string">'哪吒之魔童降世'</span>, <span class="string">'流浪地球'</span>, <span class="string">'复仇者联盟4：终局之战'</span>, <span class="string">'我和我的祖国'</span>]</span><br><span class="line"><span class="comment"># 三天内票房数</span></span><br><span class="line">movie_day1 = np.random.randint(<span class="number">1000</span>, <span class="number">2000</span>, size=len(movie))</span><br><span class="line">movie_day2 = np.random.randint(<span class="number">1000</span>, <span class="number">2000</span>, size=len(movie))</span><br><span class="line">movie_day3 = np.random.randint(<span class="number">1000</span>, <span class="number">2000</span>, size=len(movie))</span><br><span class="line">print(movie_day1)</span><br><span class="line"><span class="comment"># x 坐标</span></span><br><span class="line">x = np.arange(len(movie))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制柱状图</span></span><br><span class="line">pyplot.bar(x, movie_day1, alpha=<span class="number">0.5</span> , width=<span class="number">0.3</span>, label=<span class="string">'第一天'</span>)</span><br><span class="line">pyplot.bar(x + <span class="number">0.3</span>, movie_day2, alpha=<span class="number">0.5</span>, width=<span class="number">0.3</span>, label=<span class="string">'第一天'</span>)</span><br><span class="line">pyplot.bar(x + <span class="number">0.6</span>, movie_day3, alpha=<span class="number">0.5</span>, width=<span class="number">0.3</span>, label=<span class="string">'第一天'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置值</span></span><br><span class="line">pyplot.xticks(x + <span class="number">0.3</span>,movie)</span><br><span class="line"></span><br><span class="line">pyplot.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示</span></span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure><h2 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h2><p>饼状图用到的方法是<code>pie</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pyplot</span><br><span class="line"></span><br><span class="line">man = <span class="number">1060</span></span><br><span class="line">woman = <span class="number">1520</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 中文标题</span></span><br><span class="line">pyplot.rcParams[<span class="string">'font.sans-serif'</span>] = <span class="string">'Kaiti'</span></span><br><span class="line"><span class="comment"># 比例</span></span><br><span class="line">man_perc = man / (man + woman)</span><br><span class="line">woman_perc = <span class="number">1</span> - man_perc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制饼状图</span></span><br><span class="line">pyplot.pie([man_perc,woman_perc],labels=[<span class="string">'男'</span>,<span class="string">'女'</span>],colors=[<span class="string">'red'</span>,<span class="string">'green'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示</span></span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure><h2 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h2><p>直方图用来观测数据的分布情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">直方图关心的是分布的状态</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pyplot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正太分布</span></span><br><span class="line">random = np.random.normal(<span class="number">0</span>,<span class="number">0.8</span>,<span class="number">1000</span>)</span><br><span class="line">random1 = np.random.normal(<span class="number">1</span>,<span class="number">0.8</span>,<span class="number">1000</span>)</span><br><span class="line">random2 = np.random.normal(<span class="number">2</span>,<span class="number">0.8</span>,<span class="number">1000</span>)</span><br><span class="line">print(random)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 binds = 直方图的数量</span></span><br><span class="line">pyplot.hist(random,bins=<span class="number">100</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line">pyplot.hist(random1,bins=<span class="number">100</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line">pyplot.hist(random2,bins=<span class="number">100</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">pyplot.show()</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Sat Aug 01 2020 14:18:37 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;code&gt;Matplotlib&lt;/code&gt;用来绘制图表的工具，数据可视化，能够绘制柱状图，直方图，折线图等图表，安装&lt;code&gt;Matplo
      
    
    </summary>
    
    
      <category term="Python" scheme="https://shijiazhuangbaifeng.github.io/categories/Python/"/>
    
    
      <category term="数据分析" scheme="https://shijiazhuangbaifeng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="数据可视化" scheme="https://shijiazhuangbaifeng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="python第三方库" scheme="https://shijiazhuangbaifeng.github.io/tags/python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
  </entry>
  
</feed>
