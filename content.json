{"meta":{"title":"苗春童的博客","subtitle":"","description":"","author":"苗春童","url":"https://shijiazhuangbaifeng.github.io","root":"/"},"pages":[{"title":"标签","date":"2017-05-27T05:47:40.000Z","updated":"2020-07-08T02:18:37.597Z","comments":true,"path":"tags/index.html","permalink":"https://shijiazhuangbaifeng.github.io/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-07-08T02:16:20.000Z","updated":"2020-07-08T02:18:44.079Z","comments":true,"path":"categories/index.html","permalink":"https://shijiazhuangbaifeng.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Elasticsearch","slug":"Eelasticsearch","date":"2020-07-15T02:53:21.000Z","updated":"2020-07-15T05:07:43.559Z","comments":true,"path":"2020/07/15/Eelasticsearch/","link":"","permalink":"https://shijiazhuangbaifeng.github.io/2020/07/15/Eelasticsearch/","excerpt":"","text":"安装 Elasticsearch单机安装 Elasticsearch安装 Elasticsearch 需要的文件有：analysis-ikcerebro-0.8.3elasticsearch-6.3.1.tar.gzelasticsearch-analysis-ik-5.6.4.zipelasticsearch-analysis-ik6.rarkibana-5.6.4-linux-x86_64.tar.gzkibana-6.3.1-linux-x86_64.tar.gz进入 ubuntu 服务器，创建目录，将以上的文件上传到该文件目录中：1234567891011121314151617mkdir -p /url/local/elasticsearchcd /url/local/elasticsearchls -latotal 400136drwxr-xr-x 5 root root 4096 Jul 12 23:39 ./drwxr-xr-x 12 root root 4096 Jul 12 23:34 ../drwxrwxr-x 3 miao miao 4096 Jul 12 23:32 analysis-ik/drwxrwxr-x 5 miao miao 4096 Jul 12 23:32 cerebro-0.8.3/-rw-rw-r-- 1 miao miao 52402153 Apr 24 2019 cerebro-0.8.3.zip-rw-rw-r-- 1 miao miao 91429350 Apr 12 2019 elasticsearch-6.3.1.tar.gz-rw-rw-r-- 1 miao miao 4502411 Apr 15 2018 elasticsearch-analysis-ik-5.6.4.zip-rw-rw-r-- 1 miao miao 4128393 May 17 2019 elasticsearch-analysis-ik6.rar-rw-rw-r-- 1 miao miao 51834711 Apr 15 2018 kibana-5.6.4-linux-x86_64.tar.gz-rw-rw-r-- 1 miao miao 205397076 Apr 12 2019 kibana-6.3.1-linux-x86_64.tar.gz解压 elasticsearch-6.3.1.tar.gz 进入文件中进行配置：1cd elasticsearch-6.3.1运行 Elasticsearch123./elasticsearchnohup ./elasticsearch &amp;浏览器访问 192.168.159.135:92001234567891011121314151617&#123; \"name\" : \"QNWRcMX\", \"cluster_name\" : \"elasticsearch\", \"cluster_uuid\" : \"0xiTx31VTxy8UUxaRR96AA\", \"version\" : &#123; \"number\" : \"6.3.1\", \"build_flavor\" : \"default\", \"build_type\" : \"tar\", \"build_hash\" : \"eb782d0\", \"build_date\" : \"2018-06-29T21:59:26.107521Z\", \"build_snapshot\" : false, \"lucene_version\" : \"7.3.1\", \"minimum_wire_compatibility_version\" : \"5.6.0\", \"minimum_index_compatibility_version\" : \"5.0.0\" &#125;, \"tagline\" : \"You Know, for Search\"&#125;以上步骤进行完了以后还需要配置 elasticsearch-6.3.1/config 目录下的两个配置文件： jvm.options 和 elasticsearch.yml 两个配置文件。123# 测试环境使用内存大小-Xms256-Xmx256在 jvm.options 中配置虚拟机的内存大小。123network.host: 192.168.159.135http.port: 9200如果不配置以上内存，elastticsearch 只能够在内网访问。错误can not run elasticsearch as root完整的错误信息如下：1234567891011121314org.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:140) ~[elasticsearch-6.3.1.jar:6.3.1] at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:127) ~[elasticsearch-6.3.1.jar:6.3.1] at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86) ~[elasticsearch-6.3.1.jar:6.3.1] at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124) ~[elasticsearch-cli-6.3.1.jar:6.3.1] at org.elasticsearch.cli.Command.main(Command.java:90) ~[elasticsearch-cli-6.3.1.jar:6.3.1] at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:93) ~[elasticsearch-6.3.1.jar:6.3.1] at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:86) ~[elasticsearch-6.3.1.jar:6.3.1]Caused by: java.lang.RuntimeException: can not run elasticsearch as root at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:104) ~[elasticsearch-6.3.1.jar:6.3.1] at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:171) ~[elasticsearch-6.3.1.jar:6.3.1] at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:326) ~[elasticsearch-6.3.1.jar:6.3.1] at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:136) ~[elasticsearch-6.3.1.jar:6.3.1] ... 6 more为了安全问题 elasticsearch 不能通过 root 账户直接启动，需要创建一个新的用户：123adduser escd /url/local/elasticsearchmax virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]Linux 默认的最大线程数12345678910111213vim /etc/security/limits.conf* hard nofile 655360* soft nofile 131072* hard nproc 4096* soft nproc 2048vim /etc/sysctl.confvm.max_map_count=655360fs.file-max=655360sysctl -pElasticsearch 集群修改配置文件 elasticsearch.yml123456789101112131415161718192021# 集群名称（相同）cluster.name: aubin-cluster # 集群下节点的名称，节点名称，仅仅是描述名称，用于在日志中区分（自定义）node.name: els1（必须不同）#指定了该节点可能成为 master 节点，还可以是数据节点 node.master: true node.data: true# 数据的默认存放路径（自定义）path.data: /opt/data# 日志的默认存放路径 path.logs: /opt/logs # 当前节点的IP地址 network.host: 192.168.0.1 # 对外提供服务的端口http.port: 9200 #9300为集群服务的端口 transport.tcp.port: 9300# 集群个节点IP地址，也可以使用域名，需要各节点能够解析 discovery.zen.ping.unicast.hosts: [\"172.18.68.11\", \"172.18.68.12\",\"172.18.68.13\"] # 为了避免脑裂，集群节点数最少为 半数+1discovery.zen.minimum_master_nodes: 2注意：清空data和logs数据使用ElasticsearchElasticsearch 交互方式通过 HTTP 协议，以 JSON 格式 RESTFUL API，GET POST PUT DELETE HEADSearch API查询有哪些索引1GET /_cat/indices?v表头的含义：名称含义healthgreen(集群完整) yellow(单点正常、集群不完整) red(单点不正常)status是否能使用index索引uuid索引统一 idpri主节点有几个rep从节点docs.count文档数docs.delete文档删除数store.size整体占空间大小pri.store.size主节点占空间大小增删改查增加一个索引：1PUT index_name添加一个文档12345678910111213141516171819PUT /index_name/type/id&#123; \"filed\":\"value\"&#125;&#123; \"_index\": \"miao\", \"_type\": \"person\", \"_id\": \"1\", \"_version\": 2, \"result\": \"updated\", \"_shards\": &#123; \"total\": 2, \"successful\": 1, \"failed\": 0 &#125;, \"_seq_no\": 1, \"_primary_term\": 1&#125;一个索引中只能够存在一个 type，PUT 既能插入也能更新查询索引的信息1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859GET /index_name/_search&#123; # 占用空间 \"took\": 74, \"timed_out\": false, # 分片 \"_shards\": &#123; \"total\": 5, \"successful\": 5, \"skipped\": 0, \"failed\": 0 &#125;,# 命中信息 \"hits\": &#123; # 命中数据量 \"total\": 3, # 命中数据最大评分 \"max_score\": 1, \"hits\": [ &#123; \"_index\": \"miao\", \"_type\": \"person\", \"_id\": \"2\", \"_score\": 1, \"_source\": &#123; \"id\": 2, \"name\": \"yindongfa\", \"age\": 19, \"sex\": \"woman\" &#125; &#125;, &#123; \"_index\": \"miao\", \"_type\": \"person\", \"_id\": \"1\", \"_score\": 1, \"_source\": &#123; \"id\": 1, \"name\": \"miaochuntong\", \"age\": 18, \"sex\": \"man\" &#125; &#125;, &#123; \"_index\": \"miao\", \"_type\": \"person\", \"_id\": \"3\", \"_score\": 1, \"_source\": &#123; \"id\": 3, \"name\": \"fanzhengyao\", \"age\": 21, \"sex\": \"man\" &#125; &#125; ] &#125;&#125;分词器分词是指将文本转换成一系列单词（term or token）的过程，也可以叫做文本分析，在es里面称为Analysis，elasticsearch 的分词器默认是英文分词器，不支持中文，所以需要安装中文分词器：分词器下载地址：https://github.com/medcl/elasticsearch-analysis-ik分词器机制Character Filter对原始文本进行处理例：去除html标签、特殊字符等Tokenizer将原始文本进行分词例：培训机构–&gt;培训，机构Token Filters分词后的关键字进行加工例：转小写、删除语气词、近义词和同义词等安装分词器下载 IK 中文分词器对应的 Elastisearch 版本，解压到 elasticsearch/plugins/ik 目录下。测试分词器ik_smart12345GET _analyze&#123; \"analyzer\": \"ik_smart\", \"text\": \"我的名字是姚明\"&#125;分词结果如下：123456789101112131415161718192021222324252627282930313233343536373839&#123; \"tokens\": [ &#123; \"token\": \"我\", \"start_offset\": 0, \"end_offset\": 1, \"type\": \"CN_CHAR\", \"position\": 0 &#125;, &#123; \"token\": \"的\", \"start_offset\": 1, \"end_offset\": 2, \"type\": \"CN_CHAR\", \"position\": 1 &#125;, &#123; \"token\": \"名字\", \"start_offset\": 2, \"end_offset\": 4, \"type\": \"CN_WORD\", \"position\": 2 &#125;, &#123; \"token\": \"是\", \"start_offset\": 4, \"end_offset\": 5, \"type\": \"CN_CHAR\", \"position\": 3 &#125;, &#123; \"token\": \"姚明\", \"start_offset\": 5, \"end_offset\": 7, \"type\": \"CN_WORD\", \"position\": 4 &#125; ]&#125;ik_max_word12345GET _analyze&#123; \"analyzer\": \"ik_max_word\", \"text\": \"我的名字是姚明\"&#125;分词结果：123456789101112131415161718192021222324252627282930313233343536373839&#123; \"tokens\": [ &#123; \"token\": \"我\", \"start_offset\": 0, \"end_offset\": 1, \"type\": \"CN_CHAR\", \"position\": 0 &#125;, &#123; \"token\": \"的\", \"start_offset\": 1, \"end_offset\": 2, \"type\": \"CN_CHAR\", \"position\": 1 &#125;, &#123; \"token\": \"名字\", \"start_offset\": 2, \"end_offset\": 4, \"type\": \"CN_WORD\", \"position\": 2 &#125;, &#123; \"token\": \"是\", \"start_offset\": 4, \"end_offset\": 5, \"type\": \"CN_CHAR\", \"position\": 3 &#125;, &#123; \"token\": \"姚明\", \"start_offset\": 5, \"end_offset\": 7, \"type\": \"CN_WORD\", \"position\": 4 &#125; ]&#125;相关度算分相关性算分：指文档与查询语句间的相关度，通过倒排索引可以获取与查询语句相匹配的文档列表如何将最符合用户查询需求的文档放到前列呢？本质问题是一个排序的问题，排序的依据是相关性算分，确定倒排索引哪个文档排在前面影响相关度算分的参数：1、TF(Term Frequency)：词频，即单词在文档中出现的次数，词频越高，相关度越高2、Document Frequency(DF)：文档词频，即单词出现的文档数3、IDF(Inverse Document Frequency)：逆向文档词频，与文档词频相反，即1/DF。即单词出现的文档数越少，相关度越高（如果一个单词在文档集出现越少，算为越重要单词）4、Field-length Norm：文档越短，相关度越高","categories":[{"name":"分布式","slug":"分布式","permalink":"https://shijiazhuangbaifeng.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"}],"tags":[{"name":"分布式","slug":"分布式","permalink":"https://shijiazhuangbaifeng.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"},{"name":"全文检索","slug":"全文检索","permalink":"https://shijiazhuangbaifeng.github.io/tags/%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"}]},{"title":"OpenCV","slug":"OpenCV","date":"2020-07-13T02:53:21.000Z","updated":"2020-07-15T05:08:36.495Z","comments":true,"path":"2020/07/13/OpenCV/","link":"","permalink":"https://shijiazhuangbaifeng.github.io/2020/07/13/OpenCV/","excerpt":"","text":"","categories":[{"name":"图像识别","slug":"图像识别","permalink":"https://shijiazhuangbaifeng.github.io/categories/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"}],"tags":[{"name":"数据分析","slug":"数据分析","permalink":"https://shijiazhuangbaifeng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"python第三方库","slug":"python第三方库","permalink":"https://shijiazhuangbaifeng.github.io/tags/python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"},{"name":"数据可视化","slug":"数据可视化","permalink":"https://shijiazhuangbaifeng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"}]},{"title":"Pandas","slug":"Pandas","date":"2020-07-13T02:53:21.000Z","updated":"2020-07-14T11:03:00.179Z","comments":true,"path":"2020/07/13/Pandas/","link":"","permalink":"https://shijiazhuangbaifeng.github.io/2020/07/13/Pandas/","excerpt":"","text":"pandas 是使 python 成为强大数据分析的语言原因之一，其中最重要的是：DataFrame：数据表格，二维（行、列）Series：一维1234567import numpy as npimport pandas as pdfrom pandas import Series,DataFrame# 画图、可视化import matplotlib.pylab as plt导入数据分析三剑客。SeriesSeries 是一组类似一位数组的的对象，由以下两部分组成：values：一组数据(ndarray类型)index：相关数据的索引标签Series 的创建由列表或者 ndarray 创建123series = Series(data = np.random.randint(10,100,size=10), index=list('asdfghjklq'), name='Python')seriesdata ： 相当于 valuesname ： 相当于去一个名字通过字典来创建123series = Series(&#123;'a':100, 'b':90, 'c':80&#125;, name='Python')series如果不指定 Series 的索引，默认就会创建整数类型的索引查看 series 的类型：123type(series)pandas.core.series.SeriesSeries 索引普通索引123series['a']series[['a','b']]隐式索引12345series[0]# 默认的索引series.iloc[0]# 和原来一抹一样series.loc['a']基本概念可以将 Series 看做成是有一个有定长度的有序字典，可以通过 shape 、 index 、 values 和 size 得到 series 的属性。123456789101112131415series.shape(10,)series.indexIndex(['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'q'], dtype='object')series.valuesarray([39, 50, 37, 86, 53, 30, 98, 20, 14, 52])series.size10可以通过 head() 和 tail() 来方便的查看 series 的样式，默认显示前五个和后五个。123series.head()series.tail()使用 isnull 和 notnull 查看是否为空：123series.isnull()series.notnull()Series 的运算适用于 ndarry 的运算同样都适合 seriesDataFrameDataFrame 创建123DataFrame(data=&#123;'Python': np.random.randint(0,150,size=5), 'Math': np.random.randint(0,150,size=5), 'En': np.random.randint(0,150,size=5)&#125;, index=list('abcde'))第二种方式，直接指定，列名：1DataFrame(data=np.random.randint(0,150,size=(10,5)), index=list('asdfgzxcvb'), columns=['Python', 'JAVA', 'C++', 'C', 'GO'])保存与读取保存为 csv 文件1data.to_csv('./data.csv')保存为 excel 文件1data.to_excel('./data.xlsx')保存为 excel 文件，需要安装 openpyxl 文件读取指定的文件123data = pd.read_csv('data.csv')data = data.rename(&#123;'Unnamed: 0':'index'&#125;, axis=1)data.set_index(keys= 'index')DataFrame 的属性index ，返回所有的索引1data.indexcolumns 列的列名1data.columnsshape 数组格式1data.shapeDataFrame 索引通过列进行索引通过字典的方式1data['Python']通过属性的方式1data.Python返回的是一个 Series 对象，所以 DataFrame 是由多个 Series组成，他们共用一个 index通过行索引获取1data.iloc[[1,2]]如果取一个就是 Series切片直接使用切片，不能对列进行切片，但是可以对行：1data['a':'f']列切片1data.iloc[:,1:3]DataFrame 的运算相关度计算1data.corr()方差1data.var()DataFrame 的基本信息1data.info()DataFrame 之间的运算dataFrame.add() 两者相加1data_class_01 + data_class_02多层索引","categories":[{"name":"Python","slug":"Python","permalink":"https://shijiazhuangbaifeng.github.io/categories/Python/"}],"tags":[{"name":"数据分析","slug":"数据分析","permalink":"https://shijiazhuangbaifeng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"python第三方库","slug":"python第三方库","permalink":"https://shijiazhuangbaifeng.github.io/tags/python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"},{"name":"数据可视化","slug":"数据可视化","permalink":"https://shijiazhuangbaifeng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"}]},{"title":"Numpy","slug":"Numpy","date":"2020-07-08T02:53:21.000Z","updated":"2020-07-10T14:09:00.599Z","comments":true,"path":"2020/07/08/Numpy/","link":"","permalink":"https://shijiazhuangbaifeng.github.io/2020/07/08/Numpy/","excerpt":"","text":"NumPy是Python中科学计算的基础包。它是一个Python库，提供多维数组对象，各种派生对象（如掩码数组和矩阵），以及用于数组快速操作的各种API，有包括数学、逻辑、形状操作、排序、选择、输入输出、离散傅立叶变换、基本线性代数，基本统计运算和随机模拟等等。1pip install numpy创建数组array根据已有的 array 对象，来创建经过 numpy 增强以后的 ndarray 对象：1234567import numpy as npl = &#123;1, 2, 3, 4, 5, 6, 7&#125;l = np.array(l)type(l)生成数组ones生成一个ndarray 数组的元素全部为 1：1np.ones(shape=(5,5), dtype=np.int8)shape 表示生成数组形状，例如上面的生成二维的数组，第一维和第二维都分别有 5 的元素，dtype 表示元素类型。zeros1np.zeros(shape=(2,5,2), dtype=np.float)效果同上，生成元素为 0 的数组。full1np.full(shape=(3,1,4), fill_value=3.14)自定义填充数组元素的值。eye1np.eye(N=5)生成单位矩阵。linespace1np.linspace(0,100,101)左闭右闭，等差数列，上一个的差和下一个的差永远相等。arange1np.arange(0,100,3)这个函数和 range 函数效果几乎完全相同。正太分布1np.random.randn(4,5)平均值为 0 ，方差是 1，这个函数是固定的。1n = np.random.normal(loc=175,scale=2,size=100).round(2)normal 可以指定 平均值和方差，round函数表示保留的小数位。数据方法round1n = np.random.normal(loc=175,scale=2,size=100).round(2)指定数据元素保留的小数位。三角函数np.sin1np.sin(n)对 n 的每一个元素进行 sin 操作。ndarrayndarray属性属性/方法作用shape数组对象的格式dtype数组元素类型ndim数组维度size数组元素个数nbytes数组元素消耗的总字节数reshape(shape[, order])返回包含具有新形状的相同数据的数组。切片操作","categories":[{"name":"Python","slug":"Python","permalink":"https://shijiazhuangbaifeng.github.io/categories/Python/"}],"tags":[{"name":"数据分析","slug":"数据分析","permalink":"https://shijiazhuangbaifeng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"python第三方库","slug":"python第三方库","permalink":"https://shijiazhuangbaifeng.github.io/tags/python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"}]},{"title":"Matplotlib","slug":"matplotlib","date":"2020-07-08T02:53:21.000Z","updated":"2020-07-08T04:00:12.015Z","comments":true,"path":"2020/07/08/matplotlib/","link":"","permalink":"https://shijiazhuangbaifeng.github.io/2020/07/08/matplotlib/","excerpt":"","text":"Matplotlib用来绘制图表的工具，数据可视化，能够绘制柱状图，直方图，折线图等图表，安装Matplotlib:1pip install matplotlib绘制折线图使用Matplotlib绘图要使用pyplot这个模块：1import matplotlib.pyplot as pyplotpyplot关于图表的基本方法如下：方法参数作用pyplot.title()label：图表的名称当前图表的名称pyplot.rcParams[&#39;font.sans-serif&#39;]赋予一个字符串，字体设置字体，对中文进行支持pyplot.xlabel()xlabel：x轴的名称设置x轴名称pyplot.ylabel()ylabel：y轴的名称设置y轴名称pyplot.show()将内存的表展示出来，重新绘制pyplot.savefig()第一个参数为名称保存为图片12345678910111213141516171819202122232425import matplotlib.pyplot as pylot# title 图标的标题pylot.title('折线图')# 中文标题pylot.rcParams['font.sans-serif'] = 'Kaiti'# 直线# pylot.plot((1,4),(2,8))# 坐标x = [1, 2, 3, 4, 5, 5]y = [1, 2, 3, 4, 5, 4]# 折线 linewidth 宽度pylot.plot(x, y, linewidth=2)# x 轴名称pylot.xlabel('x轴')# y 轴的名称pylot.ylabel('y轴')# 显示pylot.show()绘制一元二次方程1234567891011121314151617181920212223242526import matplotlib.pyplot as pylotimport numpy as np# x 和 y 的值x = np.linspace(-10, 10, 100, dtype=float)y = x ** -1print(x)print(y)# pylot.axhline(0)pylot.axvline(0, color='red')# 折线 linewidth 宽度pylot.plot(x, y, linewidth=1)# x 轴名称pylot.xlabel('x')# y 轴的名称pylot.ylabel('y')# 保存图片pylot.savefig(\"一元二次方程\")# 显示pylot.show()分区sublot将画布分为n行n列，并进入某一块分区：12# 分区pylot.subplot(2,2,1)想要切换分区再次调用即可，但是行列要和上一次一致散点图散点图使用的是scatter方法，该方法有以下参数：参数作用x一个集合，存放xy一个集合，存放ys大小，一个集合，要和点的个数一致c颜色，和s相同alpha透明度0~1123456789101112131415import numpy as npimport matplotlib.pyplot as ploy# 等差数列x = np.random.randint(10,100,50)y = np.random.randint(10,100,50)# sizesize = np.random.randint(50,500,50)# colorcolor = np.random.randint(10,100,50)# 绘制散点图ploy.scatter(x,y,s=size,alpha=0.5,c=color)# 展示ploy.show()图例在绘制折线图的时候，会绘制许多条线，每一条线使用不同的样式来描述，需要一块内容来描述每一条线的作用：12345678910111213141516171819import numpy as npimport matplotlib.pyplot as pylot# 生成 xx = np.linspace(-10, 10, 100)sin_y = np.sin(x)cos_y = np.cos(x)# 绘制pylot.plot(x, sin_y, '--y', label='sin')pylot.plot(x, cos_y, '-g', label='cos')pylot.axhline(0, c=\"#FF6347\", ls=\"--\", lw=1)# 显示图例 loc : 图例的位置 labels : 每一个线条的注释 lines : 每一个线条的样式pylot.legend(loc='upper left') # fancybox边框 framealpha透明度 shadow明影边框宽度# 展示pylot.show()plot的label参数就是图例的信息，legend显示图例，默认是不显示的，接收一个参数，图例所在的位置.格式化在plot函数中还接受一个参数fmt格式化线条：color字符颜色字符颜色字符颜色字符颜色b蓝色r红色m洋红色k黑色g绿色c青色y黄色w白色marker字符标记字符标记字符标记字符标记.点标记&gt;右三角标记p五边形标记D菱形标记,像素标记1三叉戟标记*星形标记d菱形标记o圆圈标记2三叉戟标记h六角形标记v倒三角标记3三叉戟标记H六角形标记_横线标记^正三角标记4三叉戟标记++标记&lt;左三角标记s正方形标记xx标记&lt;line字符格式字符格式字符格式字符格式-实线–虚线-.点划线:点线柱状图绘制柱状图使用的函数的bar和barh，barh是用来绘制水平方向的柱状图：12345678910111213141516171819import matplotlib.pyplot as pyplotimport numpy as np# 年份x = ['1980', '1981', '1982']# 销量y = [2000, 3000, 4000]# 绘制柱状图pyplot.bar(x, y, width=0.5) # width 在原来的宽度倍数# 水平方向绘制pyplot.barh(x, y)# x 坐标的值# yplot.xticks()# 展示pyplot.show()xticks用来修改x坐标上x的值电影票销量12345678910111213141516171819202122232425262728import numpy as npimport matplotlib.pyplot as pyplot# 中文标题pyplot.rcParams['font.sans-serif'] = 'Kaiti'# 电影movie = ['哪吒之魔童降世', '流浪地球', '复仇者联盟4：终局之战', '我和我的祖国']# 三天内票房数movie_day1 = np.random.randint(1000, 2000, size=len(movie))movie_day2 = np.random.randint(1000, 2000, size=len(movie))movie_day3 = np.random.randint(1000, 2000, size=len(movie))print(movie_day1)# x 坐标x = np.arange(len(movie))# 绘制柱状图pyplot.bar(x, movie_day1, alpha=0.5 , width=0.3, label='第一天')pyplot.bar(x + 0.3, movie_day2, alpha=0.5, width=0.3, label='第一天')pyplot.bar(x + 0.6, movie_day3, alpha=0.5, width=0.3, label='第一天')# 设置值pyplot.xticks(x + 0.3,movie)pyplot.legend()# 展示pyplot.show()饼状图饼状图用到的方法是pie：1234567891011121314151617import numpy as npimport matplotlib.pyplot as pyplotman = 1060woman = 1520# 中文标题pyplot.rcParams['font.sans-serif'] = 'Kaiti'# 比例man_perc = man / (man + woman)woman_perc = 1 - man_perc# 绘制饼状图pyplot.pie([man_perc,woman_perc],labels=['男','女'],colors=['red','green'])# 展示pyplot.show()直方图直方图用来观测数据的分布情况：123456789101112131415161718\"\"\"直方图关心的是分布的状态\"\"\"import numpy as npimport matplotlib.pyplot as pyplot# 正太分布random = np.random.normal(0,0.8,1000)random1 = np.random.normal(1,0.8,1000)random2 = np.random.normal(2,0.8,1000)print(random)# 绘制 binds = 直方图的数量pyplot.hist(random,bins=100,alpha=0.5)pyplot.hist(random1,bins=100,alpha=0.5)pyplot.hist(random2,bins=100,alpha=0.5)pyplot.show()","categories":[{"name":"Python","slug":"Python","permalink":"https://shijiazhuangbaifeng.github.io/categories/Python/"}],"tags":[{"name":"数据分析","slug":"数据分析","permalink":"https://shijiazhuangbaifeng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"python第三方库","slug":"python第三方库","permalink":"https://shijiazhuangbaifeng.github.io/tags/python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"},{"name":"数据可视化","slug":"数据可视化","permalink":"https://shijiazhuangbaifeng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"}]}],"categories":[{"name":"分布式","slug":"分布式","permalink":"https://shijiazhuangbaifeng.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"},{"name":"图像识别","slug":"图像识别","permalink":"https://shijiazhuangbaifeng.github.io/categories/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"},{"name":"Python","slug":"Python","permalink":"https://shijiazhuangbaifeng.github.io/categories/Python/"}],"tags":[{"name":"分布式","slug":"分布式","permalink":"https://shijiazhuangbaifeng.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"},{"name":"全文检索","slug":"全文检索","permalink":"https://shijiazhuangbaifeng.github.io/tags/%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"},{"name":"数据分析","slug":"数据分析","permalink":"https://shijiazhuangbaifeng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"python第三方库","slug":"python第三方库","permalink":"https://shijiazhuangbaifeng.github.io/tags/python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"},{"name":"数据可视化","slug":"数据可视化","permalink":"https://shijiazhuangbaifeng.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"}]}